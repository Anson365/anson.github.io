{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/fexo/source/css/styles.css","path":"css/styles.css","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.eot","path":"fonts/PoiretOne-Regular.eot","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.ttf","path":"fonts/PoiretOne-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.woff","path":"fonts/PoiretOne-Regular.woff","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.eot","path":"fonts/calligraffitti-regular-webfont.eot","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff","path":"fonts/calligraffitti-regular-webfont.woff","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff2","path":"fonts/calligraffitti-regular-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.eot","path":"fonts/fontello.eot","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.svg","path":"fonts/fontello.svg","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.ttf","path":"fonts/fontello.ttf","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.woff","path":"fonts/fontello.woff","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.woff2","path":"fonts/fontello.woff2","modified":1,"renderable":1},{"_id":"themes/fexo/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/app.js","path":"js/app.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/bundle.js","path":"js/bundle.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/fastclick.js","path":"js/fastclick.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/scroll-spy.js","path":"js/scroll-spy.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/util.js","path":"js/util.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/zenscroll.js","path":"js/zenscroll.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/sass/styles.scss","path":"sass/styles.scss","modified":1,"renderable":1},{"_id":"themes/fexo/source/css/styles.css.map","path":"css/styles.css.map","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.ttf","path":"fonts/calligraffitti-regular-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.svg","path":"fonts/PoiretOne-Regular.svg","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.svg","path":"fonts/calligraffitti-regular-webfont.svg","modified":1,"renderable":1},{"_id":"themes/fexo/source/sass/component/prev-net.scss","path":"sass/component/prev-net.scss","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.eot","path":"fonts/Lobster-Regular.eot","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.ttf","path":"fonts/Lobster-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.woff","path":"fonts/Lobster-Regular.woff","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.svg","path":"fonts/Lobster-Regular.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/fexo/.csscomb.json","hash":"0bff596879c2556634b9a92abe5b1606dc77fd1c","modified":1496849369000},{"_id":"themes/fexo/.gitignore","hash":"32223fbe296f8e3026c689bad8f3dea9d0fcbb43","modified":1496849369000},{"_id":"themes/fexo/LICENSE","hash":"db4cb5aef6072a96721b5428fdd999647c049d55","modified":1496849369000},{"_id":"themes/fexo/README.md","hash":"35cd346c229e17ed83609ee94b5d6493c4ab9982","modified":1496849369000},{"_id":"themes/fexo/_config.yml","hash":"39d21433f37ef095717bc5d81a9f068a9b82cc65","modified":1496934953000},{"_id":"themes/fexo/gulpfile.js","hash":"5995b9c4e8e18d1670ad30b2881d49fa17e56415","modified":1496849369000},{"_id":"themes/fexo/package.json","hash":"351b5b21f5ea8851103ee1891248be43f3c27027","modified":1496849369000},{"_id":"source/_posts/daling-travelling.md","hash":"032b500e7288aa7e0820bfaf4fb8b157c20e6a02","modified":1496849369000},{"_id":"source/_posts/foreword.md","hash":"7c79a6a23d1b19b1db09560a9f7d9369640a2952","modified":1496849369000},{"_id":"source/_posts/java-road-map.md","hash":"e3279b6dc140e61c037c358ae32e82d21256423a","modified":1496849369000},{"_id":"source/_posts/java-concurrent.md","hash":"8af80f8f815b92a2593e5bdc0f43cfda86b6e39d","modified":1496934926000},{"_id":"source/_posts/xiaomi-interview.md","hash":"dd6b8889e059ed6ed0d210f4498c11d8f819c035","modified":1496934460000},{"_id":"source/about/index.md","hash":"507996d1aad09278bc94a499deecb92db633801e","modified":1496849369000},{"_id":"source/category/index.md","hash":"404323a588952c3d45e4a898c216c71a461fe901","modified":1496849369000},{"_id":"source/search/index.md","hash":"2b4f04ea1c1db89414393400333e1ada6fbeede4","modified":1496849369000},{"_id":"source/tag/index.md","hash":"bee4c19d66746750628e1e0ba397e6623a31d70a","modified":1496849369000},{"_id":"themes/fexo/languages/default.yml","hash":"1a6762d52295b0f7586f40c35e713c0fd33c2a2b","modified":1496849369000},{"_id":"themes/fexo/languages/en.yml","hash":"b58364c7dfac61eddd64510f74ca7516da48f0cf","modified":1496849369000},{"_id":"themes/fexo/languages/no.yml","hash":"bf11017d77f64fbafb9c99ac219d076b20d53afc","modified":1496849369000},{"_id":"themes/fexo/languages/zh-CN.yml","hash":"1a6762d52295b0f7586f40c35e713c0fd33c2a2b","modified":1496849369000},{"_id":"themes/fexo/languages/zh-TW.yml","hash":"6141b4c7a094c74bd9df7c08908d92b561c1a0c0","modified":1496849369000},{"_id":"themes/fexo/layout/about.ejs","hash":"f1f06842f3fac2c7dd74811722431c5720e6cf8d","modified":1496849369000},{"_id":"themes/fexo/layout/category.ejs","hash":"e8c8209f74ac0c96c29dbdff38d0f43664417342","modified":1496849369000},{"_id":"themes/fexo/layout/archive.ejs","hash":"9c22251c328e937c444a9f5d4b324f97a78d324f","modified":1496849369000},{"_id":"themes/fexo/layout/index.ejs","hash":"9d33cd03e7a8adf8bbc124c248def36c15e681d0","modified":1496849369000},{"_id":"themes/fexo/layout/layout.ejs","hash":"ae485be0f6c0c431245e0cac21dc109c9d0125e8","modified":1496849369000},{"_id":"themes/fexo/layout/post.ejs","hash":"8cf15be489f8f3c11ac0215c16cbce36c854555f","modified":1496849369000},{"_id":"themes/fexo/layout/link.ejs","hash":"0144bdb1bc5f19763535b79b3302bf85bc0afbff","modified":1496849369000},{"_id":"themes/fexo/layout/project.ejs","hash":"6648041e1319c8ee3e16c882b33bb457c67a9527","modified":1496849369000},{"_id":"themes/fexo/layout/search.ejs","hash":"8c6fc59bed1facf14dd6a48bdf8dd44452583f4d","modified":1496849369000},{"_id":"themes/fexo/layout/tag.ejs","hash":"ea8f39f11e6f8750edbf4130abf26168a403b1b4","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/article.ejs","hash":"ab0adc8f18a96eab18bb584233c0e8d4ddba71fc","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/baidu-analytics.ejs","hash":"c19e4abec19c23840fff7f8a51f4aefbb2b7e8ca","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/baidu-push.ejs","hash":"6950255d74efac8811d5b05d0d7a263c3c96486d","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/head.ejs","hash":"794916e761ea82fb606a2173af68e9bf524f6efb","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/home.ejs","hash":"cf16661b9c7ad631272c2635e2b9467750f9550a","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/load-script.ejs","hash":"4675c917548817118f4a3c5d84acc98d6c61a1d8","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/style.ejs","hash":"d1e80d7cf8b22929f5c6d8590eac38b069ea055d","modified":1496849369000},{"_id":"themes/fexo/source/css/styles.css","hash":"c4d6a1f5403cf2fe2674ba82eb2b32b0fd7dfdb8","modified":1496849369000},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.eot","hash":"2a4ef0d00fb77d16e37c3da429698b029e7d2d2f","modified":1496849369000},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.ttf","hash":"2b186ce205301f7f3abd441f0372b72adcd2aee3","modified":1496849369000},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.woff","hash":"1cebcedde2c52261591bc322b176638798336a24","modified":1496849369000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.eot","hash":"4c7bcece73621f648fa71d58fa13c28670fed8ca","modified":1496849369000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff","hash":"1364845a3815740c572e29c83fd8d54f1c1ef5de","modified":1496849369000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff2","hash":"ba50c427166090361b0dab4c72136c7b451e86d4","modified":1496849369000},{"_id":"themes/fexo/source/fonts/fontello.eot","hash":"7732065eeaec4614e9548955d9bd30ccd7b149c1","modified":1496849369000},{"_id":"themes/fexo/source/fonts/fontello.svg","hash":"33a984f4482a5ba5e7bc67d82e8db63cda4e3ae1","modified":1496849369000},{"_id":"themes/fexo/source/fonts/fontello.ttf","hash":"e255d37ca14348e9a8532667a757ab552e58caff","modified":1496849369000},{"_id":"themes/fexo/source/fonts/fontello.woff","hash":"45737fea847f3942ef405f00ea4df940fbb6bbd9","modified":1496849369000},{"_id":"themes/fexo/source/fonts/fontello.woff2","hash":"1dfbc23328582f7cd9bcbe538224f6c762023e43","modified":1496849369000},{"_id":"themes/fexo/source/images/avatar.jpg","hash":"06b315b1cde634d2313044a83c40b1ac10961134","modified":1496849369000},{"_id":"themes/fexo/source/js/app.js","hash":"a6d6e7fba3d69d0dec2c4d18debe0dc4cc7ab319","modified":1496849369000},{"_id":"themes/fexo/source/js/bundle.js","hash":"7da160b15a43ce19273ec85204828bd42628546f","modified":1496849369000},{"_id":"themes/fexo/source/js/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1496849369000},{"_id":"themes/fexo/source/js/scroll-spy.js","hash":"81b81362fcd63592045a673b54ce1edb7a6e3028","modified":1496849369000},{"_id":"themes/fexo/source/js/util.js","hash":"8136da2bec1faf5fe3e14fa436f501292fca8c07","modified":1496849369000},{"_id":"themes/fexo/source/js/zenscroll.js","hash":"bea2a3571555fdae64e8fc56f161f9a4f427b335","modified":1496849369000},{"_id":"themes/fexo/source/sass/_animate.scss","hash":"8de97c948cb4b9c9b7a87c0f7332ed534c378e26","modified":1496849369000},{"_id":"themes/fexo/source/sass/_base.scss","hash":"83f01dbe82e47ce781c6e7eb8a793d95d97e168b","modified":1496849369000},{"_id":"themes/fexo/source/sass/_common.scss","hash":"b1fc97d6d24a92a9a7a9d39be4fe844f5c0f6d44","modified":1496849369000},{"_id":"themes/fexo/source/sass/_fontello.scss","hash":"f2d6b86bb63459884cf63e8c045fd10c827396eb","modified":1496849369000},{"_id":"themes/fexo/source/sass/_fonts.scss","hash":"10e188d379782ae2ee10427544919557036d0137","modified":1496849369000},{"_id":"themes/fexo/source/sass/_highlight-js.scss","hash":"38a5c4d9f3a2943aff9bde1d624d710587e3bc05","modified":1496849369000},{"_id":"themes/fexo/source/sass/_normalize.scss","hash":"e58275a588bb631a37a2988145eea231ed23176b","modified":1496849369000},{"_id":"themes/fexo/source/sass/_type.scss","hash":"cc7a25654593030f5214d5adf85f12a954c373c5","modified":1496849369000},{"_id":"themes/fexo/source/sass/_variable.scss","hash":"7b05581ef035a88bd1191914ff992103c7812bdf","modified":1496849369000},{"_id":"themes/fexo/source/sass/styles.scss","hash":"86ebe05d6a2931dd6fceef1e50c31ca996dc20be","modified":1496849369000},{"_id":"themes/fexo/source/css/styles.css.map","hash":"8153b0247617810c1333dbd40840975e0b966ecb","modified":1496849369000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.ttf","hash":"4688935c427ae40dcbf16523bc11d9fc10e359b5","modified":1496849369000},{"_id":"themes/fexo/source/sass/pages/_tag.scss","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/component/back-top.ejs","hash":"47f2b8306b901f0fffc6aa0cfa40db697a0c5aff","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/component/category-box.ejs","hash":"f18e08e5c8718d5cd6672fc01e25ba457db0a385","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/component/category.ejs","hash":"2429158ff177b8876de765498b54d0c91b3fc551","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/component/comments.ejs","hash":"aa41542c7682d9b9e627dee046a3608ca6295692","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/component/date.ejs","hash":"163fbd874481cb9e2b6da5282701a3fbaa4e367a","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/component/disqus.ejs","hash":"21de7498d235a52337335108fce7446e1a21ea1c","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/component/donation.ejs","hash":"65bf93ad8e149033e6f93d673cc85ee223615589","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/component/duoshuo.ejs","hash":"b732200315e4c82e92bc7bd0ad33eb171d246e26","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/component/gentie.ejs","hash":"9b78a138fb93a71b481ab25c8dea2e082e5e9d6c","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/component/hypercomments.ejs","hash":"321339582edb1dd9c4e4ca13108fe494d08494fc","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/component/item-category-name.ejs","hash":"8ab52c9b5d5db1d3c1d343ecb405c4e15cd144ac","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/component/item-post.ejs","hash":"722e5dbde2d4683eea08f2af922358db45b253b1","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/component/item-tag.ejs","hash":"1b4c4e090c33ccfd44b531a5de9af16eec266512","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/component/item-year.ejs","hash":"906a6aea44a30e83c4c4e449294c7e4d831c188e","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/component/modal.ejs","hash":"8edceb2fd6c770691bd5cf4a35236c1def8410fe","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/component/page-header.ejs","hash":"30fa5caa7e34d4730fcf82733803ef98added164","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/component/pagination.ejs","hash":"ffbb548aee6e15cae924ee7f922f28b2403e8e45","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/component/prev-net.ejs","hash":"d1cb2e61814bcbd25ccb1628f99b18316e029892","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/component/tag-box.ejs","hash":"d648ea91ec9dc72bca80d70fbb66f7655bd0ea12","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/component/tag-list.ejs","hash":"8535c40b573744ced738b051383c0feca80eb0e9","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/component/title.ejs","hash":"e2fcdd904123186648513cfca4c7ad04921d2d57","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/component/toc.ejs","hash":"000be428e925f5595af29eeba37ba6111f7f6511","modified":1496849369000},{"_id":"themes/fexo/layout/_partial/component/toolbox.ejs","hash":"fcfcccc5b231c4050f1a665b70f7738f9d070541","modified":1496849369000},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.svg","hash":"e21109783f218cb7849b12e867e0b775ce3fadda","modified":1496849369000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.svg","hash":"76e1e4cee6f2b5d596c635631938ee5eb6ab3e67","modified":1496849369000},{"_id":"themes/fexo/source/sass/component/_back-top.scss","hash":"1c67da7007f4b9d8c65deea3d82c0f579e65f2c2","modified":1496849369000},{"_id":"themes/fexo/source/sass/component/_category-box.scss","hash":"a807145b74d1b98270ea19ae35edd25b4c448bfa","modified":1496849369000},{"_id":"themes/fexo/source/sass/component/_comments.scss","hash":"3e9b61bc08f38f947f54e942986a19a7f95ce723","modified":1496849369000},{"_id":"themes/fexo/source/sass/component/_donation.scss","hash":"172a3d5f747ba028d7e10e6f03ebc1db4d487a54","modified":1496849369000},{"_id":"themes/fexo/source/sass/component/_hint.scss","hash":"2812b4e10313168f2e082b740c60d64a151d94c8","modified":1496849369000},{"_id":"themes/fexo/source/sass/component/_index.scss","hash":"a741a0bfb47d0acdef12cdeb968c104bb002f86d","modified":1496849369000},{"_id":"themes/fexo/source/sass/component/_item-category-name.scss","hash":"119840d160cd263b57e79e2099a81079d7eeee3d","modified":1496849369000},{"_id":"themes/fexo/source/sass/component/_item-post.scss","hash":"1fb2e9be2d2edbb538cfbce7c80d5847f88e2f05","modified":1496849369000},{"_id":"themes/fexo/source/sass/component/_item-title.scss","hash":"cdaca2858abc9428ef01103a7fbea8f095d856aa","modified":1496849369000},{"_id":"themes/fexo/source/sass/component/_item-year.scss","hash":"12c147dd4ab9587cd622083c86c2f6cf07d8e26a","modified":1496849369000},{"_id":"themes/fexo/source/sass/component/_list-post.scss","hash":"43564f6443385bf34e15672d1477d1c7560f5563","modified":1496849369000},{"_id":"themes/fexo/source/sass/component/_modal.scss","hash":"2f0ed96df388ec28445b1ce5c6a61a0a697f9a68","modified":1496849369000},{"_id":"themes/fexo/source/sass/component/_page-header.scss","hash":"893d0595ef48323dce449ef0d17308ce02b36087","modified":1496849369000},{"_id":"themes/fexo/source/sass/component/_pagination.scss","hash":"12c1880c518aee2e3ccf59661d01c308639f8a9e","modified":1496849369000},{"_id":"themes/fexo/source/sass/component/_table.scss","hash":"4899fb31d1be8d5c9c397fcbcfc2ff0c5b2e7f7f","modified":1496849369000},{"_id":"themes/fexo/source/sass/component/_tag-box.scss","hash":"7601951d09a75a7c39493bfa1b1da5ac989d9cda","modified":1496849369000},{"_id":"themes/fexo/source/sass/component/_toc.scss","hash":"3b4c083cb2ba4a88ca35b6d8259ee991c83b3406","modified":1496849369000},{"_id":"themes/fexo/source/sass/component/_toolbox-mobile.scss","hash":"f15b215b9bb103ee1773a01d8badd81bb7643710","modified":1496849369000},{"_id":"themes/fexo/source/sass/component/_toolbox.scss","hash":"964a480d4e7fad100463195cde2a3f67f9765c23","modified":1496849369000},{"_id":"themes/fexo/source/sass/component/prev-net.scss","hash":"2a5befab6cef93c9023a548422d5af4ab614f84d","modified":1496849369000},{"_id":"themes/fexo/source/sass/pages/_about.scss","hash":"7d61e627ea5376390081e0b93db426ffc6c4dee8","modified":1496849369000},{"_id":"themes/fexo/source/sass/pages/_archive.scss","hash":"fefd54282a42ebb68b711f1cfefa1f67abbde05b","modified":1496849369000},{"_id":"themes/fexo/source/sass/pages/_category.scss","hash":"713242d10c0c8687c9e2f287f1beeb38de6cdbad","modified":1496849369000},{"_id":"themes/fexo/source/sass/pages/_home.scss","hash":"b65bb069ed28fbf223c5bb7e760882f79d20fa46","modified":1496849369000},{"_id":"themes/fexo/source/sass/pages/_index.scss","hash":"d9fe73a87585abad06a7dd77b67ec7ce6c24402c","modified":1496849369000},{"_id":"themes/fexo/source/sass/pages/_link.scss","hash":"d3a249423c7ee88d1cb3a12e03f6c42a0a4d45a1","modified":1496849369000},{"_id":"themes/fexo/source/sass/pages/_post.scss","hash":"c6f694568af362f9fe1e7e2b9909e47303178116","modified":1496849369000},{"_id":"themes/fexo/source/sass/pages/_project.scss","hash":"bcbaded3d378bbaa1497f4c3843994ea589f3149","modified":1496849369000},{"_id":"themes/fexo/source/sass/pages/_search.scss","hash":"fd28f01829628c9d21f9391d5067ddcd836dad13","modified":1496849369000},{"_id":"themes/fexo/source/fonts/Lobster-Regular.eot","hash":"4f0c85f63beb0d95610317e16f1d4acdd2962eee","modified":1496849369000},{"_id":"themes/fexo/source/fonts/Lobster-Regular.ttf","hash":"50a84291b7012bfdcf9ff5116d6c7aa3f257f37f","modified":1496849369000},{"_id":"themes/fexo/source/fonts/Lobster-Regular.woff","hash":"298b80b1c9f694e1a055d62a5d809863c89baf50","modified":1496849369000},{"_id":"themes/fexo/source/fonts/Lobster-Regular.svg","hash":"be1cab622c673942fb4d11a23c012227938b4792","modified":1496849369000},{"_id":"public/search.json","hash":"1f096c7f48104a3489d5f998dd30bd03f9aa50f1","modified":1496935026886},{"_id":"public/about/index.html","hash":"7c376d60deff4634f672237333da3ee84cb8694a","modified":1496935027120},{"_id":"public/category/index.html","hash":"b4aca1eb7e3e91f93fa42fff9ade04bd9b24350d","modified":1496935027120},{"_id":"public/search/index.html","hash":"caa8a644775bf470d2344bd065cb16533c7ed935","modified":1496935027120},{"_id":"public/tag/index.html","hash":"7fe4ca2a7f67d95ca6d2241600a58de599a9b545","modified":1496935027120},{"_id":"public/2017/05/28/xiaomi-interview/index.html","hash":"2be8385a4eb4085c22a48d892778a63f3b9b22c3","modified":1496935027120},{"_id":"public/2017/05/22/daling-travelling/index.html","hash":"1936a94aec7cb3244a7cfa52d0c4ba52ff126dd4","modified":1496935027120},{"_id":"public/2017/05/18/java-road-map/index.html","hash":"b1266eb0aa1bd512f8d8477c7c5b2a88959c7ba9","modified":1496935027120},{"_id":"public/2017/05/17/foreword/index.html","hash":"cb7c2aaf779466332bd0d1458adc750d5a0e67a1","modified":1496935027120},{"_id":"public/archives/index.html","hash":"94cbef004d6a350503c42c6b452f950d2cac2581","modified":1496935027121},{"_id":"public/archives/2017/index.html","hash":"a8346091511dc126b8f553a0654ac6d0954428e3","modified":1496935027121},{"_id":"public/archives/2017/05/index.html","hash":"083fc493fa392e379a996afd997d3e9aee09e31a","modified":1496935027121},{"_id":"public/archives/2017/06/index.html","hash":"b08aca0ecb586a0c15077c8e84477f8dbac84231","modified":1496935027121},{"_id":"public/categories/life/index.html","hash":"52d8a8669193ace545045c7cca1c19e0024f813d","modified":1496935027121},{"_id":"public/categories/study/index.html","hash":"9b8e8febab0902904eb7b7054fdd4138fbb131a9","modified":1496935027121},{"_id":"public/categories/summarize/index.html","hash":"bc7cc1479edbc64165ee49df4edd6325d7c37f76","modified":1496935027121},{"_id":"public/index.html","hash":"cb535b88aac5f307b4d51bca0d0d71bb618f01c2","modified":1496935027121},{"_id":"public/tags/生活/index.html","hash":"43e1e47e890a5b989d694481930c85335707256c","modified":1496935027122},{"_id":"public/tags/工作/index.html","hash":"2816cae5103f1fc849a1fb0c5266eabcf4de3571","modified":1496935027122},{"_id":"public/tags/学习/index.html","hash":"e3400f262c841df9a6e4c54a4a7ac70f5ee1f11a","modified":1496935027122},{"_id":"public/tags/旅行/index.html","hash":"5d43c86ef2866261a0b6674dc60818e9c1de54b0","modified":1496935027122},{"_id":"public/tags/java/index.html","hash":"59f23f2decbf8ec5f40b52cffebcfa7fbfdb69a8","modified":1496935027122},{"_id":"public/tags/中间件/index.html","hash":"3edf9e18262726ce471029d8075de2dc8d0f1a95","modified":1496935027122},{"_id":"public/tags/后端/index.html","hash":"7f805c300834e09222ee4f120f54c5bc531bd906","modified":1496935027122},{"_id":"public/tags/数据库/index.html","hash":"f164e214923ca021f47dc1173774d2cc30b95e7e","modified":1496935027122},{"_id":"public/tags/concurrent/index.html","hash":"e63ac3da03217d3d5be3b3d62a54343012e68894","modified":1496935027123},{"_id":"public/tags/多线程/index.html","hash":"24f829d4addc84a9acecdb280c2b7939d1474300","modified":1496935027123},{"_id":"public/tags/Executor/index.html","hash":"df3a44214581f2b46fbaef111b34868b29b7fc8f","modified":1496935027124},{"_id":"public/tags/面试/index.html","hash":"2bfb5e6f73ccd25a3dae8737ccc7748407acda2c","modified":1496935027124},{"_id":"public/tags/总结/index.html","hash":"94b78669b755e922d003b6acb65945708574645b","modified":1496935027124},{"_id":"public/2017/06/07/java-concurrent/index.html","hash":"b843a2d05031fe993ac4afedffd1e0e54a0e4f09","modified":1496935027124},{"_id":"public/fonts/PoiretOne-Regular.eot","hash":"2a4ef0d00fb77d16e37c3da429698b029e7d2d2f","modified":1496935027135},{"_id":"public/fonts/PoiretOne-Regular.ttf","hash":"2b186ce205301f7f3abd441f0372b72adcd2aee3","modified":1496935027135},{"_id":"public/fonts/PoiretOne-Regular.woff","hash":"1cebcedde2c52261591bc322b176638798336a24","modified":1496935027135},{"_id":"public/fonts/calligraffitti-regular-webfont.eot","hash":"4c7bcece73621f648fa71d58fa13c28670fed8ca","modified":1496935027135},{"_id":"public/fonts/calligraffitti-regular-webfont.woff","hash":"1364845a3815740c572e29c83fd8d54f1c1ef5de","modified":1496935027135},{"_id":"public/fonts/fontello.eot","hash":"7732065eeaec4614e9548955d9bd30ccd7b149c1","modified":1496935027135},{"_id":"public/fonts/calligraffitti-regular-webfont.woff2","hash":"ba50c427166090361b0dab4c72136c7b451e86d4","modified":1496935027135},{"_id":"public/fonts/fontello.svg","hash":"33a984f4482a5ba5e7bc67d82e8db63cda4e3ae1","modified":1496935027135},{"_id":"public/fonts/fontello.ttf","hash":"e255d37ca14348e9a8532667a757ab552e58caff","modified":1496935027136},{"_id":"public/fonts/fontello.woff","hash":"45737fea847f3942ef405f00ea4df940fbb6bbd9","modified":1496935027136},{"_id":"public/fonts/fontello.woff2","hash":"1dfbc23328582f7cd9bcbe538224f6c762023e43","modified":1496935027136},{"_id":"public/images/avatar.jpg","hash":"06b315b1cde634d2313044a83c40b1ac10961134","modified":1496935027136},{"_id":"public/sass/styles.scss","hash":"86ebe05d6a2931dd6fceef1e50c31ca996dc20be","modified":1496935027136},{"_id":"public/sass/component/prev-net.scss","hash":"2a5befab6cef93c9023a548422d5af4ab614f84d","modified":1496935027136},{"_id":"public/fonts/calligraffitti-regular-webfont.ttf","hash":"4688935c427ae40dcbf16523bc11d9fc10e359b5","modified":1496935027145},{"_id":"public/css/styles.css.map","hash":"8153b0247617810c1333dbd40840975e0b966ecb","modified":1496935027151},{"_id":"public/js/app.js","hash":"a6d6e7fba3d69d0dec2c4d18debe0dc4cc7ab319","modified":1496935027157},{"_id":"public/js/bundle.js","hash":"7da160b15a43ce19273ec85204828bd42628546f","modified":1496935027157},{"_id":"public/js/scroll-spy.js","hash":"81b81362fcd63592045a673b54ce1edb7a6e3028","modified":1496935027157},{"_id":"public/js/util.js","hash":"8136da2bec1faf5fe3e14fa436f501292fca8c07","modified":1496935027157},{"_id":"public/js/zenscroll.js","hash":"bea2a3571555fdae64e8fc56f161f9a4f427b335","modified":1496935027157},{"_id":"public/css/styles.css","hash":"c4d6a1f5403cf2fe2674ba82eb2b32b0fd7dfdb8","modified":1496935027157},{"_id":"public/js/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1496935027157},{"_id":"public/fonts/PoiretOne-Regular.svg","hash":"e21109783f218cb7849b12e867e0b775ce3fadda","modified":1496935027157},{"_id":"public/fonts/calligraffitti-regular-webfont.svg","hash":"76e1e4cee6f2b5d596c635631938ee5eb6ab3e67","modified":1496935027157},{"_id":"public/fonts/Lobster-Regular.eot","hash":"4f0c85f63beb0d95610317e16f1d4acdd2962eee","modified":1496935027183},{"_id":"public/fonts/Lobster-Regular.ttf","hash":"50a84291b7012bfdcf9ff5116d6c7aa3f257f37f","modified":1496935027183},{"_id":"public/fonts/Lobster-Regular.woff","hash":"298b80b1c9f694e1a055d62a5d809863c89baf50","modified":1496935027183},{"_id":"public/fonts/Lobster-Regular.svg","hash":"be1cab622c673942fb4d11a23c012227938b4792","modified":1496935027206}],"Category":[{"name":"life","_id":"cj3okgq6t0004ls6enfham4b1"},{"name":"study","_id":"cj3okgq78000els6eeqty6z81"},{"name":"summarize","_id":"cj3okgq79000hls6echgz2mo4"}],"Data":[],"Page":[{"title":"about","layout":"about","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\ncomments: false\n---","date":"2017-06-07T15:29:29.000Z","updated":"2017-06-07T15:29:29.000Z","path":"about/index.html","_id":"cj3okgq6o0001ls6eb7lt1ihw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"category","layout":"category","comments":0,"_content":"\n","source":"category/index.md","raw":"---\ntitle: category\nlayout: category\ncomments: false\n---\n\n","date":"2017-06-07T15:29:29.000Z","updated":"2017-06-07T15:29:29.000Z","path":"category/index.html","_id":"cj3okgq6s0003ls6egvc3c6lf","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"search","layout":"search","comments":0,"_content":"","source":"search/index.md","raw":"---\ntitle: search\nlayout: search\ncomments: false\n---","date":"2017-06-07T15:29:29.000Z","updated":"2017-06-07T15:29:29.000Z","path":"search/index.html","_id":"cj3okgq6z0007ls6e1a1nnc4d","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tag","layout":"tag","comments":0,"_content":"","source":"tag/index.md","raw":"---\ntitle: tag\nlayout: tag\ncomments: false\n---","date":"2017-06-07T15:29:29.000Z","updated":"2017-06-07T15:29:29.000Z","path":"tag/index.html","_id":"cj3okgq740009ls6esc9sb5gf","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"The beginning or the end","date":"2017-05-17T07:48:57.000Z","_content":"## The end  \n\n  不知不觉2017年快过半了。不得不感慨一下时光的荏苒。回顾这半年还是可圈可点的，只是真正到总结的时候却变得那么不值一提。    \n  一次“偶然”的机会，四月底，踏上了换工作的路程。写简历的时候，颇有踌躇，在公司的一年余竟然总结不出什么可圈可点的地方。    \n  看着简历上一两笔概况的一年半。。。  \n  看着一份份简历出去后石沉大海。。。\n  看着全白的github提交记录。。。\n  看着当时创建的技术blog再无更新。。。\n\n    \n  我这个毕业快三年的七尺男儿，感觉到了前所未有的危机。  \n    \n  鬼知道这段时间干了什么\n  鬼知道这段时间学了什么\n  鬼知道这段时间经历了什么\n  鬼知道接下来的路该怎么走\n  \n  绝望！伤心！失落！\n  生活上的丰衣足食的环境里让我失去了向上攀爬的动力！\n  工作上的得心应手让我失去了继续学习的能力！\n  \n  我！当危机来临时变得这么手足无措。\n  \n## The beginning  \n  \n  决定从现在起一定要改变现状\n  工作上开始记录总结\n  生活上乐于分享\n  学习上做好笔记\n  \n  不图别的至少让下次换工作的时候简历及知识点上有亮点和快速复习！！！\n  \n  路漫漫其修远兮，我将上下而求索！\n\n ","source":"_posts/foreword.md","raw":"---\ntitle: The beginning or the end\ndate: 2017-05-17 15:48:57\ncategory: life\ntags: [生活,工作,学习]\n---\n## The end  \n\n  不知不觉2017年快过半了。不得不感慨一下时光的荏苒。回顾这半年还是可圈可点的，只是真正到总结的时候却变得那么不值一提。    \n  一次“偶然”的机会，四月底，踏上了换工作的路程。写简历的时候，颇有踌躇，在公司的一年余竟然总结不出什么可圈可点的地方。    \n  看着简历上一两笔概况的一年半。。。  \n  看着一份份简历出去后石沉大海。。。\n  看着全白的github提交记录。。。\n  看着当时创建的技术blog再无更新。。。\n\n    \n  我这个毕业快三年的七尺男儿，感觉到了前所未有的危机。  \n    \n  鬼知道这段时间干了什么\n  鬼知道这段时间学了什么\n  鬼知道这段时间经历了什么\n  鬼知道接下来的路该怎么走\n  \n  绝望！伤心！失落！\n  生活上的丰衣足食的环境里让我失去了向上攀爬的动力！\n  工作上的得心应手让我失去了继续学习的能力！\n  \n  我！当危机来临时变得这么手足无措。\n  \n## The beginning  \n  \n  决定从现在起一定要改变现状\n  工作上开始记录总结\n  生活上乐于分享\n  学习上做好笔记\n  \n  不图别的至少让下次换工作的时候简历及知识点上有亮点和快速复习！！！\n  \n  路漫漫其修远兮，我将上下而求索！\n\n ","slug":"foreword","published":1,"updated":"2017-06-07T15:29:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3okgq6k0000ls6eabm8q7gk","content":"<h2 id=\"The-end\"><a href=\"#The-end\" class=\"headerlink\" title=\"The end\"></a>The end</h2><p>  不知不觉2017年快过半了。不得不感慨一下时光的荏苒。回顾这半年还是可圈可点的，只是真正到总结的时候却变得那么不值一提。<br>  一次“偶然”的机会，四月底，踏上了换工作的路程。写简历的时候，颇有踌躇，在公司的一年余竟然总结不出什么可圈可点的地方。<br>  看着简历上一两笔概况的一年半。。。<br>  看着一份份简历出去后石沉大海。。。<br>  看着全白的github提交记录。。。<br>  看着当时创建的技术blog再无更新。。。</p>\n<p>  我这个毕业快三年的七尺男儿，感觉到了前所未有的危机。  </p>\n<p>  鬼知道这段时间干了什么<br>  鬼知道这段时间学了什么<br>  鬼知道这段时间经历了什么<br>  鬼知道接下来的路该怎么走</p>\n<p>  绝望！伤心！失落！<br>  生活上的丰衣足食的环境里让我失去了向上攀爬的动力！<br>  工作上的得心应手让我失去了继续学习的能力！</p>\n<p>  我！当危机来临时变得这么手足无措。</p>\n<h2 id=\"The-beginning\"><a href=\"#The-beginning\" class=\"headerlink\" title=\"The beginning\"></a>The beginning</h2><p>  决定从现在起一定要改变现状<br>  工作上开始记录总结<br>  生活上乐于分享<br>  学习上做好笔记</p>\n<p>  不图别的至少让下次换工作的时候简历及知识点上有亮点和快速复习！！！</p>\n<p>  路漫漫其修远兮，我将上下而求索！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"The-end\"><a href=\"#The-end\" class=\"headerlink\" title=\"The end\"></a>The end</h2><p>  不知不觉2017年快过半了。不得不感慨一下时光的荏苒。回顾这半年还是可圈可点的，只是真正到总结的时候却变得那么不值一提。<br>  一次“偶然”的机会，四月底，踏上了换工作的路程。写简历的时候，颇有踌躇，在公司的一年余竟然总结不出什么可圈可点的地方。<br>  看着简历上一两笔概况的一年半。。。<br>  看着一份份简历出去后石沉大海。。。<br>  看着全白的github提交记录。。。<br>  看着当时创建的技术blog再无更新。。。</p>\n<p>  我这个毕业快三年的七尺男儿，感觉到了前所未有的危机。  </p>\n<p>  鬼知道这段时间干了什么<br>  鬼知道这段时间学了什么<br>  鬼知道这段时间经历了什么<br>  鬼知道接下来的路该怎么走</p>\n<p>  绝望！伤心！失落！<br>  生活上的丰衣足食的环境里让我失去了向上攀爬的动力！<br>  工作上的得心应手让我失去了继续学习的能力！</p>\n<p>  我！当危机来临时变得这么手足无措。</p>\n<h2 id=\"The-beginning\"><a href=\"#The-beginning\" class=\"headerlink\" title=\"The beginning\"></a>The beginning</h2><p>  决定从现在起一定要改变现状<br>  工作上开始记录总结<br>  生活上乐于分享<br>  学习上做好笔记</p>\n<p>  不图别的至少让下次换工作的时候简历及知识点上有亮点和快速复习！！！</p>\n<p>  路漫漫其修远兮，我将上下而求索！</p>\n"},{"title":"大连之行","date":"2017-05-22T14:54:02.000Z","_content":"\n趁着好基友毕业前夕，去大连浪了一波。  \n大连这座城市，在我之前的印象中就是薄xl和万达的发家地。然后就传说中的绿化很好，很赞！  \n抵达大连已经早上八点多了，\n一出火车站给人的感觉十分的清爽。感觉整洁的街道\n一路绿树掩映，路边偶尔的鲜花点缀，丝毫没有已到五月中旬的感觉。\n\n\n在好基友的导游下，第一站我们来到了星海广场  \n听说之前广场中央的华表由于bo的倒台而拆除了   \n另外大连建市一百年的金色脚印也被铲除\n除了这个之外 周围的一切都看起来这么的祥和  \n![星海广场](http://s11.mogucdn.com/mlcdn/c45406/170526_53g3l98j5d4dfaie3al8k446a42el_12168x3824.jpg_500x9999.v1c7E.jpg)\n\n\n一群海鸥在熙攘的人群头上盘旋，远处的大桥看起来是如此的刺眼。  \n大好的海景视野就这么给拦腰斩断了。  \n\n\n恰逢大连举办第十七届国际徒步节，于是跟随大部队。\n我们也开始了30多公里的沿海滨路徒步而整个大连的景色都集中在这条路上  \n\n滨海路沿线风景  \n![滨海西路](http://s2.mogucdn.com/mlcdn/c45406/170526_33hi3hce87922fadfi7f9e0kf6304_1280x960.jpg_500x9999.v1c7E.jpg)\n\n退役的辽宁舰  \n![辽宁舰](http://s11.mogucdn.com/mlcdn/c45406/170526_0d6073k5119acjhhjib7cg9091bag_1280x960.jpg_500x9999.v1c7E.jpg)\n\n抓拍的海鸥  \n![海鸥](http://s11.mogucdn.com/mlcdn/c45406/170526_3kf14k5hbd50fe1l8gge71e6d22cd_1280x960.jpg_500x9999.v1c7E.jpg)\n\n海边的小鹅暖石  \n![鹅暖石](http://s11.mogucdn.com/mlcdn/c45406/170526_7dfj89j6lk92aig0aj93g5dc256ea_1280x960.jpg_500x9999.v1c7E.jpg)\n\n我们就这样一步一步，边走边逗留，从九点10分左右出发，一直走到了下午的5点半。沿着滨海西路、滨海中路，最后终于到了滨海东路。  \n基友的脚也起泡了，实在是太累了。于是我们就此作罢，开始往回走。  \n\n最后夜宿星海广场，晚上也没什么活动，倒头就睡着了\n\n\n第二天我们启程前往造船厂，远观了正在建造中的中国第一艘国产航母  \n![国产航母](http://s2.mogucdn.com/mlcdn/c45406/170526_5g4815b8e161fg1ja14lg8h0g140c_1280x960.jpg_500x9999.v1c7E.jpg)\n\n\n就此两天的大连之行就基本结束了。\n\n","source":"_posts/daling-travelling.md","raw":"---\ntitle: 大连之行\ndate: 2017-05-22 22:54:02\ncategory: life\ntags: [生活,旅行]\n---\n\n趁着好基友毕业前夕，去大连浪了一波。  \n大连这座城市，在我之前的印象中就是薄xl和万达的发家地。然后就传说中的绿化很好，很赞！  \n抵达大连已经早上八点多了，\n一出火车站给人的感觉十分的清爽。感觉整洁的街道\n一路绿树掩映，路边偶尔的鲜花点缀，丝毫没有已到五月中旬的感觉。\n\n\n在好基友的导游下，第一站我们来到了星海广场  \n听说之前广场中央的华表由于bo的倒台而拆除了   \n另外大连建市一百年的金色脚印也被铲除\n除了这个之外 周围的一切都看起来这么的祥和  \n![星海广场](http://s11.mogucdn.com/mlcdn/c45406/170526_53g3l98j5d4dfaie3al8k446a42el_12168x3824.jpg_500x9999.v1c7E.jpg)\n\n\n一群海鸥在熙攘的人群头上盘旋，远处的大桥看起来是如此的刺眼。  \n大好的海景视野就这么给拦腰斩断了。  \n\n\n恰逢大连举办第十七届国际徒步节，于是跟随大部队。\n我们也开始了30多公里的沿海滨路徒步而整个大连的景色都集中在这条路上  \n\n滨海路沿线风景  \n![滨海西路](http://s2.mogucdn.com/mlcdn/c45406/170526_33hi3hce87922fadfi7f9e0kf6304_1280x960.jpg_500x9999.v1c7E.jpg)\n\n退役的辽宁舰  \n![辽宁舰](http://s11.mogucdn.com/mlcdn/c45406/170526_0d6073k5119acjhhjib7cg9091bag_1280x960.jpg_500x9999.v1c7E.jpg)\n\n抓拍的海鸥  \n![海鸥](http://s11.mogucdn.com/mlcdn/c45406/170526_3kf14k5hbd50fe1l8gge71e6d22cd_1280x960.jpg_500x9999.v1c7E.jpg)\n\n海边的小鹅暖石  \n![鹅暖石](http://s11.mogucdn.com/mlcdn/c45406/170526_7dfj89j6lk92aig0aj93g5dc256ea_1280x960.jpg_500x9999.v1c7E.jpg)\n\n我们就这样一步一步，边走边逗留，从九点10分左右出发，一直走到了下午的5点半。沿着滨海西路、滨海中路，最后终于到了滨海东路。  \n基友的脚也起泡了，实在是太累了。于是我们就此作罢，开始往回走。  \n\n最后夜宿星海广场，晚上也没什么活动，倒头就睡着了\n\n\n第二天我们启程前往造船厂，远观了正在建造中的中国第一艘国产航母  \n![国产航母](http://s2.mogucdn.com/mlcdn/c45406/170526_5g4815b8e161fg1ja14lg8h0g140c_1280x960.jpg_500x9999.v1c7E.jpg)\n\n\n就此两天的大连之行就基本结束了。\n\n","slug":"daling-travelling","published":1,"updated":"2017-06-07T15:29:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3okgq6q0002ls6e133twyxq","content":"<p>趁着好基友毕业前夕，去大连浪了一波。<br>大连这座城市，在我之前的印象中就是薄xl和万达的发家地。然后就传说中的绿化很好，很赞！<br>抵达大连已经早上八点多了，<br>一出火车站给人的感觉十分的清爽。感觉整洁的街道<br>一路绿树掩映，路边偶尔的鲜花点缀，丝毫没有已到五月中旬的感觉。</p>\n<p>在好基友的导游下，第一站我们来到了星海广场<br>听说之前广场中央的华表由于bo的倒台而拆除了<br>另外大连建市一百年的金色脚印也被铲除<br>除了这个之外 周围的一切都看起来这么的祥和<br><img src=\"http://s11.mogucdn.com/mlcdn/c45406/170526_53g3l98j5d4dfaie3al8k446a42el_12168x3824.jpg_500x9999.v1c7E.jpg\" alt=\"星海广场\"></p>\n<p>一群海鸥在熙攘的人群头上盘旋，远处的大桥看起来是如此的刺眼。<br>大好的海景视野就这么给拦腰斩断了。  </p>\n<p>恰逢大连举办第十七届国际徒步节，于是跟随大部队。<br>我们也开始了30多公里的沿海滨路徒步而整个大连的景色都集中在这条路上  </p>\n<p>滨海路沿线风景<br><img src=\"http://s2.mogucdn.com/mlcdn/c45406/170526_33hi3hce87922fadfi7f9e0kf6304_1280x960.jpg_500x9999.v1c7E.jpg\" alt=\"滨海西路\"></p>\n<p>退役的辽宁舰<br><img src=\"http://s11.mogucdn.com/mlcdn/c45406/170526_0d6073k5119acjhhjib7cg9091bag_1280x960.jpg_500x9999.v1c7E.jpg\" alt=\"辽宁舰\"></p>\n<p>抓拍的海鸥<br><img src=\"http://s11.mogucdn.com/mlcdn/c45406/170526_3kf14k5hbd50fe1l8gge71e6d22cd_1280x960.jpg_500x9999.v1c7E.jpg\" alt=\"海鸥\"></p>\n<p>海边的小鹅暖石<br><img src=\"http://s11.mogucdn.com/mlcdn/c45406/170526_7dfj89j6lk92aig0aj93g5dc256ea_1280x960.jpg_500x9999.v1c7E.jpg\" alt=\"鹅暖石\"></p>\n<p>我们就这样一步一步，边走边逗留，从九点10分左右出发，一直走到了下午的5点半。沿着滨海西路、滨海中路，最后终于到了滨海东路。<br>基友的脚也起泡了，实在是太累了。于是我们就此作罢，开始往回走。  </p>\n<p>最后夜宿星海广场，晚上也没什么活动，倒头就睡着了</p>\n<p>第二天我们启程前往造船厂，远观了正在建造中的中国第一艘国产航母<br><img src=\"http://s2.mogucdn.com/mlcdn/c45406/170526_5g4815b8e161fg1ja14lg8h0g140c_1280x960.jpg_500x9999.v1c7E.jpg\" alt=\"国产航母\"></p>\n<p>就此两天的大连之行就基本结束了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>趁着好基友毕业前夕，去大连浪了一波。<br>大连这座城市，在我之前的印象中就是薄xl和万达的发家地。然后就传说中的绿化很好，很赞！<br>抵达大连已经早上八点多了，<br>一出火车站给人的感觉十分的清爽。感觉整洁的街道<br>一路绿树掩映，路边偶尔的鲜花点缀，丝毫没有已到五月中旬的感觉。</p>\n<p>在好基友的导游下，第一站我们来到了星海广场<br>听说之前广场中央的华表由于bo的倒台而拆除了<br>另外大连建市一百年的金色脚印也被铲除<br>除了这个之外 周围的一切都看起来这么的祥和<br><img src=\"http://s11.mogucdn.com/mlcdn/c45406/170526_53g3l98j5d4dfaie3al8k446a42el_12168x3824.jpg_500x9999.v1c7E.jpg\" alt=\"星海广场\"></p>\n<p>一群海鸥在熙攘的人群头上盘旋，远处的大桥看起来是如此的刺眼。<br>大好的海景视野就这么给拦腰斩断了。  </p>\n<p>恰逢大连举办第十七届国际徒步节，于是跟随大部队。<br>我们也开始了30多公里的沿海滨路徒步而整个大连的景色都集中在这条路上  </p>\n<p>滨海路沿线风景<br><img src=\"http://s2.mogucdn.com/mlcdn/c45406/170526_33hi3hce87922fadfi7f9e0kf6304_1280x960.jpg_500x9999.v1c7E.jpg\" alt=\"滨海西路\"></p>\n<p>退役的辽宁舰<br><img src=\"http://s11.mogucdn.com/mlcdn/c45406/170526_0d6073k5119acjhhjib7cg9091bag_1280x960.jpg_500x9999.v1c7E.jpg\" alt=\"辽宁舰\"></p>\n<p>抓拍的海鸥<br><img src=\"http://s11.mogucdn.com/mlcdn/c45406/170526_3kf14k5hbd50fe1l8gge71e6d22cd_1280x960.jpg_500x9999.v1c7E.jpg\" alt=\"海鸥\"></p>\n<p>海边的小鹅暖石<br><img src=\"http://s11.mogucdn.com/mlcdn/c45406/170526_7dfj89j6lk92aig0aj93g5dc256ea_1280x960.jpg_500x9999.v1c7E.jpg\" alt=\"鹅暖石\"></p>\n<p>我们就这样一步一步，边走边逗留，从九点10分左右出发，一直走到了下午的5点半。沿着滨海西路、滨海中路，最后终于到了滨海东路。<br>基友的脚也起泡了，实在是太累了。于是我们就此作罢，开始往回走。  </p>\n<p>最后夜宿星海广场，晚上也没什么活动，倒头就睡着了</p>\n<p>第二天我们启程前往造船厂，远观了正在建造中的中国第一艘国产航母<br><img src=\"http://s2.mogucdn.com/mlcdn/c45406/170526_5g4815b8e161fg1ja14lg8h0g140c_1280x960.jpg_500x9999.v1c7E.jpg\" alt=\"国产航母\"></p>\n<p>就此两天的大连之行就基本结束了。</p>\n"},{"title":"java后端学习知识点梳理","date":"2017-05-18T02:54:59.000Z","_content":"\n## 概述\n\n  经过几年的工作学习，对后端开发有了一定的认识。下面对工作中遇到的部分知识点进行终结梳理。\n  一个是今后对照参考一下作为学习提纲，再者进行简单总结进行复习回顾。\n    \n## 知识点\n\n### 网络知识\n  * HTTP协议\n  * OSI七层模型\n  * TCP/IP协议\n  * 网络通信\n\n### 分布式相关\n  * 负载均衡（七层，四层，系统。。。）\n  * SOAP\n  * 分库分表\n  * 分布式事务\n  \n### 开源框架\n  * SpringMVC\n  * Struts2\n  * Mybatis\n  * Hibernate\n  * SpringBoot\n  * Dubbo\n  * Shiro\n  \n### 数据库及中间件 \n \n#### 关系型数据库 \n  * Mysql\n  * PostgreSql\n  * Oracle\n  \n#### kv\n  * redis\n  * memcache\n  * mongodb\n  \n#### 搜索引擎\n  * solr\n  * elastic search\n  * lucence\n    \n#### MQ  \n  * kafka\n  * RabitMQ\n\n#### 负载均衡   \n  * Nginx\n  * LVS\n    \n#### web容器\n  * Tomcat\n  * jetty\n\n#### 其他知识点\n  * JVM\n  * 多线程\n  * IO\n  * 设计模式\n  * 网络安全\n  * 大数据相关\n  * 基本算法\n  \n  \n  \n  \n  \n  \n  ","source":"_posts/java-road-map.md","raw":"---\ntitle: java后端学习知识点梳理\ndate: 2017-05-18 10:54:59\ncategories: study\ntags: [java,学习,后端,中间件,数据库]\n---\n\n## 概述\n\n  经过几年的工作学习，对后端开发有了一定的认识。下面对工作中遇到的部分知识点进行终结梳理。\n  一个是今后对照参考一下作为学习提纲，再者进行简单总结进行复习回顾。\n    \n## 知识点\n\n### 网络知识\n  * HTTP协议\n  * OSI七层模型\n  * TCP/IP协议\n  * 网络通信\n\n### 分布式相关\n  * 负载均衡（七层，四层，系统。。。）\n  * SOAP\n  * 分库分表\n  * 分布式事务\n  \n### 开源框架\n  * SpringMVC\n  * Struts2\n  * Mybatis\n  * Hibernate\n  * SpringBoot\n  * Dubbo\n  * Shiro\n  \n### 数据库及中间件 \n \n#### 关系型数据库 \n  * Mysql\n  * PostgreSql\n  * Oracle\n  \n#### kv\n  * redis\n  * memcache\n  * mongodb\n  \n#### 搜索引擎\n  * solr\n  * elastic search\n  * lucence\n    \n#### MQ  \n  * kafka\n  * RabitMQ\n\n#### 负载均衡   \n  * Nginx\n  * LVS\n    \n#### web容器\n  * Tomcat\n  * jetty\n\n#### 其他知识点\n  * JVM\n  * 多线程\n  * IO\n  * 设计模式\n  * 网络安全\n  * 大数据相关\n  * 基本算法\n  \n  \n  \n  \n  \n  \n  ","slug":"java-road-map","published":1,"updated":"2017-06-07T15:29:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3okgq6y0006ls6euvqonbri","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>  经过几年的工作学习，对后端开发有了一定的认识。下面对工作中遇到的部分知识点进行终结梳理。<br>  一个是今后对照参考一下作为学习提纲，再者进行简单总结进行复习回顾。</p>\n<h2 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><h3 id=\"网络知识\"><a href=\"#网络知识\" class=\"headerlink\" title=\"网络知识\"></a>网络知识</h3><ul>\n<li>HTTP协议</li>\n<li>OSI七层模型</li>\n<li>TCP/IP协议</li>\n<li>网络通信</li>\n</ul>\n<h3 id=\"分布式相关\"><a href=\"#分布式相关\" class=\"headerlink\" title=\"分布式相关\"></a>分布式相关</h3><ul>\n<li>负载均衡（七层，四层，系统。。。）</li>\n<li>SOAP</li>\n<li>分库分表</li>\n<li>分布式事务</li>\n</ul>\n<h3 id=\"开源框架\"><a href=\"#开源框架\" class=\"headerlink\" title=\"开源框架\"></a>开源框架</h3><ul>\n<li>SpringMVC</li>\n<li>Struts2</li>\n<li>Mybatis</li>\n<li>Hibernate</li>\n<li>SpringBoot</li>\n<li>Dubbo</li>\n<li>Shiro</li>\n</ul>\n<h3 id=\"数据库及中间件\"><a href=\"#数据库及中间件\" class=\"headerlink\" title=\"数据库及中间件\"></a>数据库及中间件</h3><h4 id=\"关系型数据库\"><a href=\"#关系型数据库\" class=\"headerlink\" title=\"关系型数据库\"></a>关系型数据库</h4><ul>\n<li>Mysql</li>\n<li>PostgreSql</li>\n<li>Oracle</li>\n</ul>\n<h4 id=\"kv\"><a href=\"#kv\" class=\"headerlink\" title=\"kv\"></a>kv</h4><ul>\n<li>redis</li>\n<li>memcache</li>\n<li>mongodb</li>\n</ul>\n<h4 id=\"搜索引擎\"><a href=\"#搜索引擎\" class=\"headerlink\" title=\"搜索引擎\"></a>搜索引擎</h4><ul>\n<li>solr</li>\n<li>elastic search</li>\n<li>lucence</li>\n</ul>\n<h4 id=\"MQ\"><a href=\"#MQ\" class=\"headerlink\" title=\"MQ\"></a>MQ</h4><ul>\n<li>kafka</li>\n<li>RabitMQ</li>\n</ul>\n<h4 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h4><ul>\n<li>Nginx</li>\n<li>LVS</li>\n</ul>\n<h4 id=\"web容器\"><a href=\"#web容器\" class=\"headerlink\" title=\"web容器\"></a>web容器</h4><ul>\n<li>Tomcat</li>\n<li>jetty</li>\n</ul>\n<h4 id=\"其他知识点\"><a href=\"#其他知识点\" class=\"headerlink\" title=\"其他知识点\"></a>其他知识点</h4><ul>\n<li>JVM</li>\n<li>多线程</li>\n<li>IO</li>\n<li>设计模式</li>\n<li>网络安全</li>\n<li>大数据相关</li>\n<li>基本算法</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>  经过几年的工作学习，对后端开发有了一定的认识。下面对工作中遇到的部分知识点进行终结梳理。<br>  一个是今后对照参考一下作为学习提纲，再者进行简单总结进行复习回顾。</p>\n<h2 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><h3 id=\"网络知识\"><a href=\"#网络知识\" class=\"headerlink\" title=\"网络知识\"></a>网络知识</h3><ul>\n<li>HTTP协议</li>\n<li>OSI七层模型</li>\n<li>TCP/IP协议</li>\n<li>网络通信</li>\n</ul>\n<h3 id=\"分布式相关\"><a href=\"#分布式相关\" class=\"headerlink\" title=\"分布式相关\"></a>分布式相关</h3><ul>\n<li>负载均衡（七层，四层，系统。。。）</li>\n<li>SOAP</li>\n<li>分库分表</li>\n<li>分布式事务</li>\n</ul>\n<h3 id=\"开源框架\"><a href=\"#开源框架\" class=\"headerlink\" title=\"开源框架\"></a>开源框架</h3><ul>\n<li>SpringMVC</li>\n<li>Struts2</li>\n<li>Mybatis</li>\n<li>Hibernate</li>\n<li>SpringBoot</li>\n<li>Dubbo</li>\n<li>Shiro</li>\n</ul>\n<h3 id=\"数据库及中间件\"><a href=\"#数据库及中间件\" class=\"headerlink\" title=\"数据库及中间件\"></a>数据库及中间件</h3><h4 id=\"关系型数据库\"><a href=\"#关系型数据库\" class=\"headerlink\" title=\"关系型数据库\"></a>关系型数据库</h4><ul>\n<li>Mysql</li>\n<li>PostgreSql</li>\n<li>Oracle</li>\n</ul>\n<h4 id=\"kv\"><a href=\"#kv\" class=\"headerlink\" title=\"kv\"></a>kv</h4><ul>\n<li>redis</li>\n<li>memcache</li>\n<li>mongodb</li>\n</ul>\n<h4 id=\"搜索引擎\"><a href=\"#搜索引擎\" class=\"headerlink\" title=\"搜索引擎\"></a>搜索引擎</h4><ul>\n<li>solr</li>\n<li>elastic search</li>\n<li>lucence</li>\n</ul>\n<h4 id=\"MQ\"><a href=\"#MQ\" class=\"headerlink\" title=\"MQ\"></a>MQ</h4><ul>\n<li>kafka</li>\n<li>RabitMQ</li>\n</ul>\n<h4 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h4><ul>\n<li>Nginx</li>\n<li>LVS</li>\n</ul>\n<h4 id=\"web容器\"><a href=\"#web容器\" class=\"headerlink\" title=\"web容器\"></a>web容器</h4><ul>\n<li>Tomcat</li>\n<li>jetty</li>\n</ul>\n<h4 id=\"其他知识点\"><a href=\"#其他知识点\" class=\"headerlink\" title=\"其他知识点\"></a>其他知识点</h4><ul>\n<li>JVM</li>\n<li>多线程</li>\n<li>IO</li>\n<li>设计模式</li>\n<li>网络安全</li>\n<li>大数据相关</li>\n<li>基本算法</li>\n</ul>\n"},{"title":"java concurrent解析","date":"2017-06-07T14:51:59.000Z","_content":"***Executor*** :抽象的Runnable任务的执行者，提供一个excute方法  \n***ExecutorService*** :抽象的线程池管理者，包含三种状态：运行、关闭、终止。当调用了shutdown()方法时，便进入了关闭状态，ExcecutorService\n不在接受新的任务，当已经提交的任务完成后便达到终止状态。  \n***ReentrantLock*** :一个可重入得Lock代码层面的并发锁，需手动释放\n***Future*** :一个Callable线程执行结束后返回的结果，提供isDone检查call方法是否执行完毕，cancel终止线程\n***BlockingQueue*** :阻塞队列，常见ArrayBlockQueue,LinkedBlockQueue  \n***CompletionService*** :ExecutorService的扩展，可以获得线程执行结果的 \n***CountDownLatch*** :一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待  \n***CyclicBarrier*** :一个同步辅助类，它允许一组线程互相等待，直到到达某个公共屏障点 \n***ScheduledExecutorService*** :一个 ExecutorService，可安排在给定的延迟后运行或定期执行的命令  \n***Semaphore*** :一个计数信号量 \n***Executors*** :提供了一系列工厂方法用于创先线程池，返回的线程池都实现了ExecutorService接口\n\n#### Executors中几种方法的对比  \n\n| 方法名称 |  缓存队列 | 方法解析 |\n| :------- | :------- | :------|\n|newCachedThreadPool() | SynchronousQueue | 1.缓存型池子，先查看池中有没有以前建立的线程，如果有，就 reuse.如果没有，就建一个新的线程加入池中  2.缓存型池子通常用于执行一些生存期很短的异步型任务因此在一些面向连接的daemon型SERVER中用得不多。但对于生存期短的异步任务，它是Executor的首选。3.能reuse的线程，必须是timeout IDLE内的池中线程，缺省timeout是60s,超过这个IDLE时长，线程实例将被终止及移出池。注意，放入CachedThreadPool的线程不必担心其结束，超过TIMEOUT不活动，其会自动被终止。|\n|newFixedThreadPool(int) | LinkedBlockingQueue |1.newFixedThreadPool与cacheThreadPool差不多，也是能reuse就用，但不能随时建新的线程 2.其独特之处:任意时间点，最多只能有固定数目的活动线程存在，此时如果有新的线程要建立，只能放在另外的队列中等待，直到当前的线程中某个线程终止直接被移出池子 3.和cacheThreadPool不同，FixedThreadPool没有IDLE机制（可能也有，但既然文档没提，肯定非常长，类似依赖上层的TCP或UDP IDLE机制之类的），所以FixedThreadPool多数针对一些很稳定很固定的正规并发线程，多用于服务器 4.从方法的源代码看，cache池和fixed 池调用的是同一个底层 池，只不过参数不同:fixed池线程数固定，并且是0秒IDLE（无IDLE）cache池线程数支持0-Integer.MAX_VALUE(显然完全没考虑主机的资源承受能力），60秒IDLE|\n|newScheduledThreadPool(int) | DelayedWorkQueue |1.调度型线程池 2.这个池子里的线程可以按schedule依次delay执行，或周期执行|\n|newSingleThreadPool() | LinkedBlockingQueue |1.单例线程，任意时间池中只能有一个线程 2.用的是和cache池和fixed池相同的底层池，但线程数目是1-1,0秒IDLE（无IDLE）|\n\n#### [BlockingQueue几种实现类](http://www.infoq.com/cn/articles/java-blocking-queue)\n\n| 类名称 | 功能描述|\n| :------| :------|\n|ArrayBlockingQueue|由数组结构组成的有界阻塞队列,其构造函数必须带一个int参数来指明其大小.其所含的对象是以FIFO(先入先出)顺序排序的|\n|LinkedBlockingQueue|一个由链表结构组成的有界阻塞队列，如果没指定队列大小，则默认为Integer.Max,遵从FIFO|\n|PriorityBlockingQueue|一个支持优先级排序的无界阻塞队列,PriorityBlockingQueue是对PriorityQueue的再次包装，是基于堆数据结构的，而PriorityQueue是没有容量限制的,可能会导致 OutOfMemoryError,往入该队列中的元素要具有比较能力|\n|DelayQueue|一个使用优先级队列实现的存放Delayed 元素的无界阻塞队列,只有在延迟期满时才能从中提取元素。该队列的头部是延迟期满后保存时间最长的 Delayed 元素|\n|SynchronousQueue|不存储元素，特殊的阻塞队列,对其的操作必须是放和取交替完成的|\n|LinkedBlockingQueue|一个由链表结构组成的无界阻塞TransferQueue队列。相对于其他阻塞队列，LinkedTransferQueue多了tryTransfer和transfer方法.transfer方法。如果当前有消费者正在等待接收元素（消费者使用take()方法或带时间限制的poll()方法时），transfer方法可以把生产者传入的元素立刻transfer（传输）给消费者。如果没有消费者在等待接收元素，transfer方法会将元素存放在队列的tail节点，并等到该元素被消费者消费了才返回|\n|LinkedBlockingDeque|是一个由链表结构组成的双向阻塞队列,所谓双向队列指的你可以从队列的两端插入和移出元素。双端队列因为多了一个操作队列的入口，在多线程同时入队时，也就减少了一半的竞争。相比其他的阻塞队列，LinkedBlockingDeque多了addFirst，addLast，offerFirst，offerLast，peekFirst，peekLast等方法|\n\n***BlockingQueue的常用方法***：\n\n> add        增加一个元索                     如果队列已满，则抛出一个IIIegaISlabEepeplian异常\n>remove   移除并返回队列头部的元素    如果队列为空，则抛出一个NoSuchElementException异常\n>element  返回队列头部的元素             如果队列为空，则抛出一个NoSuchElementException异常\n>offer       添加一个元素并返回true       如果队列已满，则返回false\n>poll(time)         移除并返问队列头部的元素    如果队列为空，则返回null\n>peek       返回队列头部的元素             如果队列为空，则返回null\n>put         添加一个元素                      如果队列满，则阻塞\n>take        移除并返回队列头部的元素     如果队列为空，则阻塞\n\n\n\n\n\n\n","source":"_posts/java-concurrent.md","raw":"---\ntitle: java concurrent解析\ndate: 2017-06-07 22:51:59\ncategory: summarize\ntags: [java,concurrent,多线程,Executor]\n---\n***Executor*** :抽象的Runnable任务的执行者，提供一个excute方法  \n***ExecutorService*** :抽象的线程池管理者，包含三种状态：运行、关闭、终止。当调用了shutdown()方法时，便进入了关闭状态，ExcecutorService\n不在接受新的任务，当已经提交的任务完成后便达到终止状态。  \n***ReentrantLock*** :一个可重入得Lock代码层面的并发锁，需手动释放\n***Future*** :一个Callable线程执行结束后返回的结果，提供isDone检查call方法是否执行完毕，cancel终止线程\n***BlockingQueue*** :阻塞队列，常见ArrayBlockQueue,LinkedBlockQueue  \n***CompletionService*** :ExecutorService的扩展，可以获得线程执行结果的 \n***CountDownLatch*** :一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待  \n***CyclicBarrier*** :一个同步辅助类，它允许一组线程互相等待，直到到达某个公共屏障点 \n***ScheduledExecutorService*** :一个 ExecutorService，可安排在给定的延迟后运行或定期执行的命令  \n***Semaphore*** :一个计数信号量 \n***Executors*** :提供了一系列工厂方法用于创先线程池，返回的线程池都实现了ExecutorService接口\n\n#### Executors中几种方法的对比  \n\n| 方法名称 |  缓存队列 | 方法解析 |\n| :------- | :------- | :------|\n|newCachedThreadPool() | SynchronousQueue | 1.缓存型池子，先查看池中有没有以前建立的线程，如果有，就 reuse.如果没有，就建一个新的线程加入池中  2.缓存型池子通常用于执行一些生存期很短的异步型任务因此在一些面向连接的daemon型SERVER中用得不多。但对于生存期短的异步任务，它是Executor的首选。3.能reuse的线程，必须是timeout IDLE内的池中线程，缺省timeout是60s,超过这个IDLE时长，线程实例将被终止及移出池。注意，放入CachedThreadPool的线程不必担心其结束，超过TIMEOUT不活动，其会自动被终止。|\n|newFixedThreadPool(int) | LinkedBlockingQueue |1.newFixedThreadPool与cacheThreadPool差不多，也是能reuse就用，但不能随时建新的线程 2.其独特之处:任意时间点，最多只能有固定数目的活动线程存在，此时如果有新的线程要建立，只能放在另外的队列中等待，直到当前的线程中某个线程终止直接被移出池子 3.和cacheThreadPool不同，FixedThreadPool没有IDLE机制（可能也有，但既然文档没提，肯定非常长，类似依赖上层的TCP或UDP IDLE机制之类的），所以FixedThreadPool多数针对一些很稳定很固定的正规并发线程，多用于服务器 4.从方法的源代码看，cache池和fixed 池调用的是同一个底层 池，只不过参数不同:fixed池线程数固定，并且是0秒IDLE（无IDLE）cache池线程数支持0-Integer.MAX_VALUE(显然完全没考虑主机的资源承受能力），60秒IDLE|\n|newScheduledThreadPool(int) | DelayedWorkQueue |1.调度型线程池 2.这个池子里的线程可以按schedule依次delay执行，或周期执行|\n|newSingleThreadPool() | LinkedBlockingQueue |1.单例线程，任意时间池中只能有一个线程 2.用的是和cache池和fixed池相同的底层池，但线程数目是1-1,0秒IDLE（无IDLE）|\n\n#### [BlockingQueue几种实现类](http://www.infoq.com/cn/articles/java-blocking-queue)\n\n| 类名称 | 功能描述|\n| :------| :------|\n|ArrayBlockingQueue|由数组结构组成的有界阻塞队列,其构造函数必须带一个int参数来指明其大小.其所含的对象是以FIFO(先入先出)顺序排序的|\n|LinkedBlockingQueue|一个由链表结构组成的有界阻塞队列，如果没指定队列大小，则默认为Integer.Max,遵从FIFO|\n|PriorityBlockingQueue|一个支持优先级排序的无界阻塞队列,PriorityBlockingQueue是对PriorityQueue的再次包装，是基于堆数据结构的，而PriorityQueue是没有容量限制的,可能会导致 OutOfMemoryError,往入该队列中的元素要具有比较能力|\n|DelayQueue|一个使用优先级队列实现的存放Delayed 元素的无界阻塞队列,只有在延迟期满时才能从中提取元素。该队列的头部是延迟期满后保存时间最长的 Delayed 元素|\n|SynchronousQueue|不存储元素，特殊的阻塞队列,对其的操作必须是放和取交替完成的|\n|LinkedBlockingQueue|一个由链表结构组成的无界阻塞TransferQueue队列。相对于其他阻塞队列，LinkedTransferQueue多了tryTransfer和transfer方法.transfer方法。如果当前有消费者正在等待接收元素（消费者使用take()方法或带时间限制的poll()方法时），transfer方法可以把生产者传入的元素立刻transfer（传输）给消费者。如果没有消费者在等待接收元素，transfer方法会将元素存放在队列的tail节点，并等到该元素被消费者消费了才返回|\n|LinkedBlockingDeque|是一个由链表结构组成的双向阻塞队列,所谓双向队列指的你可以从队列的两端插入和移出元素。双端队列因为多了一个操作队列的入口，在多线程同时入队时，也就减少了一半的竞争。相比其他的阻塞队列，LinkedBlockingDeque多了addFirst，addLast，offerFirst，offerLast，peekFirst，peekLast等方法|\n\n***BlockingQueue的常用方法***：\n\n> add        增加一个元索                     如果队列已满，则抛出一个IIIegaISlabEepeplian异常\n>remove   移除并返回队列头部的元素    如果队列为空，则抛出一个NoSuchElementException异常\n>element  返回队列头部的元素             如果队列为空，则抛出一个NoSuchElementException异常\n>offer       添加一个元素并返回true       如果队列已满，则返回false\n>poll(time)         移除并返问队列头部的元素    如果队列为空，则返回null\n>peek       返回队列头部的元素             如果队列为空，则返回null\n>put         添加一个元素                      如果队列满，则阻塞\n>take        移除并返回队列头部的元素     如果队列为空，则阻塞\n\n\n\n\n\n\n","slug":"java-concurrent","published":1,"updated":"2017-06-08T15:15:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3okgq710008ls6ererhwxn0","content":"<p><strong><em>Executor</em></strong> :抽象的Runnable任务的执行者，提供一个excute方法<br><strong><em>ExecutorService</em></strong> :抽象的线程池管理者，包含三种状态：运行、关闭、终止。当调用了shutdown()方法时，便进入了关闭状态，ExcecutorService<br>不在接受新的任务，当已经提交的任务完成后便达到终止状态。<br><strong><em>ReentrantLock</em></strong> :一个可重入得Lock代码层面的并发锁，需手动释放<br><strong><em>Future</em></strong> :一个Callable线程执行结束后返回的结果，提供isDone检查call方法是否执行完毕，cancel终止线程<br><strong><em>BlockingQueue</em></strong> :阻塞队列，常见ArrayBlockQueue,LinkedBlockQueue<br><strong><em>CompletionService</em></strong> :ExecutorService的扩展，可以获得线程执行结果的<br><strong><em>CountDownLatch</em></strong> :一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待<br><strong><em>CyclicBarrier</em></strong> :一个同步辅助类，它允许一组线程互相等待，直到到达某个公共屏障点<br><strong><em>ScheduledExecutorService</em></strong> :一个 ExecutorService，可安排在给定的延迟后运行或定期执行的命令<br><strong><em>Semaphore</em></strong> :一个计数信号量<br><strong><em>Executors</em></strong> :提供了一系列工厂方法用于创先线程池，返回的线程池都实现了ExecutorService接口</p>\n<h4 id=\"Executors中几种方法的对比\"><a href=\"#Executors中几种方法的对比\" class=\"headerlink\" title=\"Executors中几种方法的对比\"></a>Executors中几种方法的对比</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法名称</th>\n<th style=\"text-align:left\">缓存队列</th>\n<th style=\"text-align:left\">方法解析</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">newCachedThreadPool()</td>\n<td style=\"text-align:left\">SynchronousQueue</td>\n<td style=\"text-align:left\">1.缓存型池子，先查看池中有没有以前建立的线程，如果有，就 reuse.如果没有，就建一个新的线程加入池中  2.缓存型池子通常用于执行一些生存期很短的异步型任务因此在一些面向连接的daemon型SERVER中用得不多。但对于生存期短的异步任务，它是Executor的首选。3.能reuse的线程，必须是timeout IDLE内的池中线程，缺省timeout是60s,超过这个IDLE时长，线程实例将被终止及移出池。注意，放入CachedThreadPool的线程不必担心其结束，超过TIMEOUT不活动，其会自动被终止。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">newFixedThreadPool(int)</td>\n<td style=\"text-align:left\">LinkedBlockingQueue</td>\n<td style=\"text-align:left\">1.newFixedThreadPool与cacheThreadPool差不多，也是能reuse就用，但不能随时建新的线程 2.其独特之处:任意时间点，最多只能有固定数目的活动线程存在，此时如果有新的线程要建立，只能放在另外的队列中等待，直到当前的线程中某个线程终止直接被移出池子 3.和cacheThreadPool不同，FixedThreadPool没有IDLE机制（可能也有，但既然文档没提，肯定非常长，类似依赖上层的TCP或UDP IDLE机制之类的），所以FixedThreadPool多数针对一些很稳定很固定的正规并发线程，多用于服务器 4.从方法的源代码看，cache池和fixed 池调用的是同一个底层 池，只不过参数不同:fixed池线程数固定，并且是0秒IDLE（无IDLE）cache池线程数支持0-Integer.MAX_VALUE(显然完全没考虑主机的资源承受能力），60秒IDLE</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">newScheduledThreadPool(int)</td>\n<td style=\"text-align:left\">DelayedWorkQueue</td>\n<td style=\"text-align:left\">1.调度型线程池 2.这个池子里的线程可以按schedule依次delay执行，或周期执行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">newSingleThreadPool()</td>\n<td style=\"text-align:left\">LinkedBlockingQueue</td>\n<td style=\"text-align:left\">1.单例线程，任意时间池中只能有一个线程 2.用的是和cache池和fixed池相同的底层池，但线程数目是1-1,0秒IDLE（无IDLE）</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"BlockingQueue几种实现类\"><a href=\"#BlockingQueue几种实现类\" class=\"headerlink\" title=\"BlockingQueue几种实现类\"></a><a href=\"http://www.infoq.com/cn/articles/java-blocking-queue\" target=\"_blank\" rel=\"external\">BlockingQueue几种实现类</a></h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类名称</th>\n<th style=\"text-align:left\">功能描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ArrayBlockingQueue</td>\n<td style=\"text-align:left\">由数组结构组成的有界阻塞队列,其构造函数必须带一个int参数来指明其大小.其所含的对象是以FIFO(先入先出)顺序排序的</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LinkedBlockingQueue</td>\n<td style=\"text-align:left\">一个由链表结构组成的有界阻塞队列，如果没指定队列大小，则默认为Integer.Max,遵从FIFO</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PriorityBlockingQueue</td>\n<td style=\"text-align:left\">一个支持优先级排序的无界阻塞队列,PriorityBlockingQueue是对PriorityQueue的再次包装，是基于堆数据结构的，而PriorityQueue是没有容量限制的,可能会导致 OutOfMemoryError,往入该队列中的元素要具有比较能力</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DelayQueue</td>\n<td style=\"text-align:left\">一个使用优先级队列实现的存放Delayed 元素的无界阻塞队列,只有在延迟期满时才能从中提取元素。该队列的头部是延迟期满后保存时间最长的 Delayed 元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SynchronousQueue</td>\n<td style=\"text-align:left\">不存储元素，特殊的阻塞队列,对其的操作必须是放和取交替完成的</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LinkedBlockingQueue</td>\n<td style=\"text-align:left\">一个由链表结构组成的无界阻塞TransferQueue队列。相对于其他阻塞队列，LinkedTransferQueue多了tryTransfer和transfer方法.transfer方法。如果当前有消费者正在等待接收元素（消费者使用take()方法或带时间限制的poll()方法时），transfer方法可以把生产者传入的元素立刻transfer（传输）给消费者。如果没有消费者在等待接收元素，transfer方法会将元素存放在队列的tail节点，并等到该元素被消费者消费了才返回</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LinkedBlockingDeque</td>\n<td style=\"text-align:left\">是一个由链表结构组成的双向阻塞队列,所谓双向队列指的你可以从队列的两端插入和移出元素。双端队列因为多了一个操作队列的入口，在多线程同时入队时，也就减少了一半的竞争。相比其他的阻塞队列，LinkedBlockingDeque多了addFirst，addLast，offerFirst，offerLast，peekFirst，peekLast等方法</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>BlockingQueue的常用方法</em></strong>：</p>\n<blockquote>\n<p>add        增加一个元索                     如果队列已满，则抛出一个IIIegaISlabEepeplian异常<br>remove   移除并返回队列头部的元素    如果队列为空，则抛出一个NoSuchElementException异常<br>element  返回队列头部的元素             如果队列为空，则抛出一个NoSuchElementException异常<br>offer       添加一个元素并返回true       如果队列已满，则返回false<br>poll(time)         移除并返问队列头部的元素    如果队列为空，则返回null<br>peek       返回队列头部的元素             如果队列为空，则返回null<br>put         添加一个元素                      如果队列满，则阻塞<br>take        移除并返回队列头部的元素     如果队列为空，则阻塞</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><strong><em>Executor</em></strong> :抽象的Runnable任务的执行者，提供一个excute方法<br><strong><em>ExecutorService</em></strong> :抽象的线程池管理者，包含三种状态：运行、关闭、终止。当调用了shutdown()方法时，便进入了关闭状态，ExcecutorService<br>不在接受新的任务，当已经提交的任务完成后便达到终止状态。<br><strong><em>ReentrantLock</em></strong> :一个可重入得Lock代码层面的并发锁，需手动释放<br><strong><em>Future</em></strong> :一个Callable线程执行结束后返回的结果，提供isDone检查call方法是否执行完毕，cancel终止线程<br><strong><em>BlockingQueue</em></strong> :阻塞队列，常见ArrayBlockQueue,LinkedBlockQueue<br><strong><em>CompletionService</em></strong> :ExecutorService的扩展，可以获得线程执行结果的<br><strong><em>CountDownLatch</em></strong> :一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待<br><strong><em>CyclicBarrier</em></strong> :一个同步辅助类，它允许一组线程互相等待，直到到达某个公共屏障点<br><strong><em>ScheduledExecutorService</em></strong> :一个 ExecutorService，可安排在给定的延迟后运行或定期执行的命令<br><strong><em>Semaphore</em></strong> :一个计数信号量<br><strong><em>Executors</em></strong> :提供了一系列工厂方法用于创先线程池，返回的线程池都实现了ExecutorService接口</p>\n<h4 id=\"Executors中几种方法的对比\"><a href=\"#Executors中几种方法的对比\" class=\"headerlink\" title=\"Executors中几种方法的对比\"></a>Executors中几种方法的对比</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法名称</th>\n<th style=\"text-align:left\">缓存队列</th>\n<th style=\"text-align:left\">方法解析</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">newCachedThreadPool()</td>\n<td style=\"text-align:left\">SynchronousQueue</td>\n<td style=\"text-align:left\">1.缓存型池子，先查看池中有没有以前建立的线程，如果有，就 reuse.如果没有，就建一个新的线程加入池中  2.缓存型池子通常用于执行一些生存期很短的异步型任务因此在一些面向连接的daemon型SERVER中用得不多。但对于生存期短的异步任务，它是Executor的首选。3.能reuse的线程，必须是timeout IDLE内的池中线程，缺省timeout是60s,超过这个IDLE时长，线程实例将被终止及移出池。注意，放入CachedThreadPool的线程不必担心其结束，超过TIMEOUT不活动，其会自动被终止。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">newFixedThreadPool(int)</td>\n<td style=\"text-align:left\">LinkedBlockingQueue</td>\n<td style=\"text-align:left\">1.newFixedThreadPool与cacheThreadPool差不多，也是能reuse就用，但不能随时建新的线程 2.其独特之处:任意时间点，最多只能有固定数目的活动线程存在，此时如果有新的线程要建立，只能放在另外的队列中等待，直到当前的线程中某个线程终止直接被移出池子 3.和cacheThreadPool不同，FixedThreadPool没有IDLE机制（可能也有，但既然文档没提，肯定非常长，类似依赖上层的TCP或UDP IDLE机制之类的），所以FixedThreadPool多数针对一些很稳定很固定的正规并发线程，多用于服务器 4.从方法的源代码看，cache池和fixed 池调用的是同一个底层 池，只不过参数不同:fixed池线程数固定，并且是0秒IDLE（无IDLE）cache池线程数支持0-Integer.MAX_VALUE(显然完全没考虑主机的资源承受能力），60秒IDLE</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">newScheduledThreadPool(int)</td>\n<td style=\"text-align:left\">DelayedWorkQueue</td>\n<td style=\"text-align:left\">1.调度型线程池 2.这个池子里的线程可以按schedule依次delay执行，或周期执行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">newSingleThreadPool()</td>\n<td style=\"text-align:left\">LinkedBlockingQueue</td>\n<td style=\"text-align:left\">1.单例线程，任意时间池中只能有一个线程 2.用的是和cache池和fixed池相同的底层池，但线程数目是1-1,0秒IDLE（无IDLE）</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"BlockingQueue几种实现类\"><a href=\"#BlockingQueue几种实现类\" class=\"headerlink\" title=\"BlockingQueue几种实现类\"></a><a href=\"http://www.infoq.com/cn/articles/java-blocking-queue\" target=\"_blank\" rel=\"external\">BlockingQueue几种实现类</a></h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类名称</th>\n<th style=\"text-align:left\">功能描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ArrayBlockingQueue</td>\n<td style=\"text-align:left\">由数组结构组成的有界阻塞队列,其构造函数必须带一个int参数来指明其大小.其所含的对象是以FIFO(先入先出)顺序排序的</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LinkedBlockingQueue</td>\n<td style=\"text-align:left\">一个由链表结构组成的有界阻塞队列，如果没指定队列大小，则默认为Integer.Max,遵从FIFO</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PriorityBlockingQueue</td>\n<td style=\"text-align:left\">一个支持优先级排序的无界阻塞队列,PriorityBlockingQueue是对PriorityQueue的再次包装，是基于堆数据结构的，而PriorityQueue是没有容量限制的,可能会导致 OutOfMemoryError,往入该队列中的元素要具有比较能力</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DelayQueue</td>\n<td style=\"text-align:left\">一个使用优先级队列实现的存放Delayed 元素的无界阻塞队列,只有在延迟期满时才能从中提取元素。该队列的头部是延迟期满后保存时间最长的 Delayed 元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SynchronousQueue</td>\n<td style=\"text-align:left\">不存储元素，特殊的阻塞队列,对其的操作必须是放和取交替完成的</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LinkedBlockingQueue</td>\n<td style=\"text-align:left\">一个由链表结构组成的无界阻塞TransferQueue队列。相对于其他阻塞队列，LinkedTransferQueue多了tryTransfer和transfer方法.transfer方法。如果当前有消费者正在等待接收元素（消费者使用take()方法或带时间限制的poll()方法时），transfer方法可以把生产者传入的元素立刻transfer（传输）给消费者。如果没有消费者在等待接收元素，transfer方法会将元素存放在队列的tail节点，并等到该元素被消费者消费了才返回</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LinkedBlockingDeque</td>\n<td style=\"text-align:left\">是一个由链表结构组成的双向阻塞队列,所谓双向队列指的你可以从队列的两端插入和移出元素。双端队列因为多了一个操作队列的入口，在多线程同时入队时，也就减少了一半的竞争。相比其他的阻塞队列，LinkedBlockingDeque多了addFirst，addLast，offerFirst，offerLast，peekFirst，peekLast等方法</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>BlockingQueue的常用方法</em></strong>：</p>\n<blockquote>\n<p>add        增加一个元索                     如果队列已满，则抛出一个IIIegaISlabEepeplian异常<br>remove   移除并返回队列头部的元素    如果队列为空，则抛出一个NoSuchElementException异常<br>element  返回队列头部的元素             如果队列为空，则抛出一个NoSuchElementException异常<br>offer       添加一个元素并返回true       如果队列已满，则返回false<br>poll(time)         移除并返问队列头部的元素    如果队列为空，则返回null<br>peek       返回队列头部的元素             如果队列为空，则返回null<br>put         添加一个元素                      如果队列满，则阻塞<br>take        移除并返回队列头部的元素     如果队列为空，则阻塞</p>\n</blockquote>\n"},{"title":"小米面试总结","date":"2017-05-28T05:25:30.000Z","_content":"\n上周面了一下小米的金融，不管结果如何，觉得还是有必要对其中涉及到知识点及问题进行总结。\n\n### Object类中的方法  \n* +equals():Boolean   \n 原生的equals比较的是两个对象的引用是否相同，换而言之就是比较对象的内存地址是否一致\n \n* +hashcode():int\n 通过散列算法计算对象的hash值  \n 拓展：解决hash冲突的方式有哪些？\n \n* +toString():String  \n 返回对象的字符串表示方式\n \n* +wait()/wait(long time)/wait(long time,int nanos):void\n 使当前线程让出CPU资源进入等待状态，\n 当其他线程调用该对象的notify/notifyAll方法时跳出等待状态\n \n* +notify():void\n 唤醒监听这个对象的一个线程\n\n* +notifyAll():void  \n 唤醒监听这个对象的所有线程\n\n* +getClass():Class\n 返回当前对象的runtime class\n \n* clone:Object\n 返回当前对象的副本，使浅克隆。深克隆的话可以用序列化及反序列化方式\n \n* finalize:void\n 当对象将被垃圾收集器回收的时候，阻止垃圾回收器回收，该方法只能使对象存活一次 \n \n### 保证线程安全的方式有哪些以及他们之间的区别？  \n 目前保证线程安全的三种方式  \n    1.用volatile修饰的变量  \n    2.用Reetrantlock 即lock和unlock修饰的代码块\n    3.用synchronized修饰的方法或者代码块  \n volatile:  \n    使用该关键字修饰的，访问变量时告诉jvm需要从主内存中获取，保证可见性，不会造成线程阻塞；\n synchronized:\n    是jvm级的安全锁，保证可见性及原子性，使用时如果发生中断异常会主动释放当前锁，会造成线程阻塞；\n Reetrantlock:\n    代码级安全锁，保证可见性及原子性，使用时不会主动释放当前锁，需要手动释放，会造成线程阻塞\n    \n 1）用法区别\n     synchronized(隐式锁)：在需要同步的对象中加入此控制，synchronized可以加在方法上，也可以加在特定代码块中，括号中表示需要锁的对象。\n     lock（显示锁）：需要显示指定起始位置和终止位置。一般使用ReentrantLock类做为锁，多个线程中必须要使用一个ReentrantLock类做为对 象才能保证锁的生效。且在加锁和解锁处需要通过lock()和unlock()显示指出。所以一般会在finally块中写unlock()以防死锁。\n 2）synchronized和lock性能区别\n     synchronized是托管给JVM执行的，而lock是java写的控制锁的代码。\n     synchronized采用的是CPU悲观锁机制，即线程获得的是独占锁。独占锁意味着其 他线程只能依靠阻塞来等待线程释放锁。而在CPU转换线程阻塞时会引起线程上下文切换，当有很多线程竞争锁的时候，会引起CPU频繁的上下文切换导致效率很低。\n     Lock用的是乐观锁方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。乐观锁实现的机制就 是CAS操作（Compare and Swap）。\n 3）synchronized和lock用途区别\n     synchronized原语和ReentrantLock在一般情况下没有什么区别，但是在非常复杂的同步应用中，请考虑使用ReentrantLock，特别是遇到下面2种需求的时候。\n     1.某个线程在等待一个锁的控制权的这段时间需要中断\n     2.需要分开处理一些wait-notify，ReentrantLock里面的Condition应用，能够控制notify哪个线程\n     3.具有公平锁功能，每个到来的线程都将排队等候、\n     \n### 写一个生产消费模型\n\n### 二分查找递归及非递归写法\n\n### 用两个stack模拟一个queue\n\n### 简单的谈谈jvm\n\n### 项目中遇到的难点及解决方式\n\n## 总结\n 整个面试的过程中，发现对基础的知识的提问相对于自己参与项目的提问整体时间所占比例大幅下降\n 由于更加专业化，面试官在提问的过程中也着重于他们自己的业务。所以整体感觉，\n 如果他们问的不是你自己感兴趣或者职业侧重点，不管是不是当前阶段的知识盲区，\n 最后能不能拿到offer都可以在某种程度上作为自己选择接不接offer的一个参考点。","source":"_posts/xiaomi-interview.md","raw":"---\ntitle: 小米面试总结\ndate: 2017-05-28 13:25:30\ncategory: summarize\ntags: [工作,面试,总结]\n---\n\n上周面了一下小米的金融，不管结果如何，觉得还是有必要对其中涉及到知识点及问题进行总结。\n\n### Object类中的方法  \n* +equals():Boolean   \n 原生的equals比较的是两个对象的引用是否相同，换而言之就是比较对象的内存地址是否一致\n \n* +hashcode():int\n 通过散列算法计算对象的hash值  \n 拓展：解决hash冲突的方式有哪些？\n \n* +toString():String  \n 返回对象的字符串表示方式\n \n* +wait()/wait(long time)/wait(long time,int nanos):void\n 使当前线程让出CPU资源进入等待状态，\n 当其他线程调用该对象的notify/notifyAll方法时跳出等待状态\n \n* +notify():void\n 唤醒监听这个对象的一个线程\n\n* +notifyAll():void  \n 唤醒监听这个对象的所有线程\n\n* +getClass():Class\n 返回当前对象的runtime class\n \n* clone:Object\n 返回当前对象的副本，使浅克隆。深克隆的话可以用序列化及反序列化方式\n \n* finalize:void\n 当对象将被垃圾收集器回收的时候，阻止垃圾回收器回收，该方法只能使对象存活一次 \n \n### 保证线程安全的方式有哪些以及他们之间的区别？  \n 目前保证线程安全的三种方式  \n    1.用volatile修饰的变量  \n    2.用Reetrantlock 即lock和unlock修饰的代码块\n    3.用synchronized修饰的方法或者代码块  \n volatile:  \n    使用该关键字修饰的，访问变量时告诉jvm需要从主内存中获取，保证可见性，不会造成线程阻塞；\n synchronized:\n    是jvm级的安全锁，保证可见性及原子性，使用时如果发生中断异常会主动释放当前锁，会造成线程阻塞；\n Reetrantlock:\n    代码级安全锁，保证可见性及原子性，使用时不会主动释放当前锁，需要手动释放，会造成线程阻塞\n    \n 1）用法区别\n     synchronized(隐式锁)：在需要同步的对象中加入此控制，synchronized可以加在方法上，也可以加在特定代码块中，括号中表示需要锁的对象。\n     lock（显示锁）：需要显示指定起始位置和终止位置。一般使用ReentrantLock类做为锁，多个线程中必须要使用一个ReentrantLock类做为对 象才能保证锁的生效。且在加锁和解锁处需要通过lock()和unlock()显示指出。所以一般会在finally块中写unlock()以防死锁。\n 2）synchronized和lock性能区别\n     synchronized是托管给JVM执行的，而lock是java写的控制锁的代码。\n     synchronized采用的是CPU悲观锁机制，即线程获得的是独占锁。独占锁意味着其 他线程只能依靠阻塞来等待线程释放锁。而在CPU转换线程阻塞时会引起线程上下文切换，当有很多线程竞争锁的时候，会引起CPU频繁的上下文切换导致效率很低。\n     Lock用的是乐观锁方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。乐观锁实现的机制就 是CAS操作（Compare and Swap）。\n 3）synchronized和lock用途区别\n     synchronized原语和ReentrantLock在一般情况下没有什么区别，但是在非常复杂的同步应用中，请考虑使用ReentrantLock，特别是遇到下面2种需求的时候。\n     1.某个线程在等待一个锁的控制权的这段时间需要中断\n     2.需要分开处理一些wait-notify，ReentrantLock里面的Condition应用，能够控制notify哪个线程\n     3.具有公平锁功能，每个到来的线程都将排队等候、\n     \n### 写一个生产消费模型\n\n### 二分查找递归及非递归写法\n\n### 用两个stack模拟一个queue\n\n### 简单的谈谈jvm\n\n### 项目中遇到的难点及解决方式\n\n## 总结\n 整个面试的过程中，发现对基础的知识的提问相对于自己参与项目的提问整体时间所占比例大幅下降\n 由于更加专业化，面试官在提问的过程中也着重于他们自己的业务。所以整体感觉，\n 如果他们问的不是你自己感兴趣或者职业侧重点，不管是不是当前阶段的知识盲区，\n 最后能不能拿到offer都可以在某种程度上作为自己选择接不接offer的一个参考点。","slug":"xiaomi-interview","published":1,"updated":"2017-06-08T15:07:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3okgq75000als6e2jnoz0il","content":"<p>上周面了一下小米的金融，不管结果如何，觉得还是有必要对其中涉及到知识点及问题进行总结。</p>\n<h3 id=\"Object类中的方法\"><a href=\"#Object类中的方法\" class=\"headerlink\" title=\"Object类中的方法\"></a>Object类中的方法</h3><ul>\n<li><p>+equals():Boolean<br>原生的equals比较的是两个对象的引用是否相同，换而言之就是比较对象的内存地址是否一致</p>\n</li>\n<li><p>+hashcode():int<br>通过散列算法计算对象的hash值<br>拓展：解决hash冲突的方式有哪些？</p>\n</li>\n<li><p>+toString():String<br>返回对象的字符串表示方式</p>\n</li>\n<li><p>+wait()/wait(long time)/wait(long time,int nanos):void<br>使当前线程让出CPU资源进入等待状态，<br>当其他线程调用该对象的notify/notifyAll方法时跳出等待状态</p>\n</li>\n<li><p>+notify():void<br>唤醒监听这个对象的一个线程</p>\n</li>\n<li><p>+notifyAll():void<br>唤醒监听这个对象的所有线程</p>\n</li>\n<li><p>+getClass():Class<br>返回当前对象的runtime class</p>\n</li>\n<li><p>clone:Object<br>返回当前对象的副本，使浅克隆。深克隆的话可以用序列化及反序列化方式</p>\n</li>\n<li><p>finalize:void<br>当对象将被垃圾收集器回收的时候，阻止垃圾回收器回收，该方法只能使对象存活一次 </p>\n</li>\n</ul>\n<h3 id=\"保证线程安全的方式有哪些以及他们之间的区别？\"><a href=\"#保证线程安全的方式有哪些以及他们之间的区别？\" class=\"headerlink\" title=\"保证线程安全的方式有哪些以及他们之间的区别？\"></a>保证线程安全的方式有哪些以及他们之间的区别？</h3><p> 目前保证线程安全的三种方式<br>    1.用volatile修饰的变量<br>    2.用Reetrantlock 即lock和unlock修饰的代码块<br>    3.用synchronized修饰的方法或者代码块<br> volatile:<br>    使用该关键字修饰的，访问变量时告诉jvm需要从主内存中获取，保证可见性，不会造成线程阻塞；<br> synchronized:<br>    是jvm级的安全锁，保证可见性及原子性，使用时如果发生中断异常会主动释放当前锁，会造成线程阻塞；<br> Reetrantlock:<br>    代码级安全锁，保证可见性及原子性，使用时不会主动释放当前锁，需要手动释放，会造成线程阻塞</p>\n<p> 1）用法区别<br>     synchronized(隐式锁)：在需要同步的对象中加入此控制，synchronized可以加在方法上，也可以加在特定代码块中，括号中表示需要锁的对象。<br>     lock（显示锁）：需要显示指定起始位置和终止位置。一般使用ReentrantLock类做为锁，多个线程中必须要使用一个ReentrantLock类做为对 象才能保证锁的生效。且在加锁和解锁处需要通过lock()和unlock()显示指出。所以一般会在finally块中写unlock()以防死锁。<br> 2）synchronized和lock性能区别<br>     synchronized是托管给JVM执行的，而lock是java写的控制锁的代码。<br>     synchronized采用的是CPU悲观锁机制，即线程获得的是独占锁。独占锁意味着其 他线程只能依靠阻塞来等待线程释放锁。而在CPU转换线程阻塞时会引起线程上下文切换，当有很多线程竞争锁的时候，会引起CPU频繁的上下文切换导致效率很低。<br>     Lock用的是乐观锁方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。乐观锁实现的机制就 是CAS操作（Compare and Swap）。<br> 3）synchronized和lock用途区别<br>     synchronized原语和ReentrantLock在一般情况下没有什么区别，但是在非常复杂的同步应用中，请考虑使用ReentrantLock，特别是遇到下面2种需求的时候。<br>     1.某个线程在等待一个锁的控制权的这段时间需要中断<br>     2.需要分开处理一些wait-notify，ReentrantLock里面的Condition应用，能够控制notify哪个线程<br>     3.具有公平锁功能，每个到来的线程都将排队等候、</p>\n<h3 id=\"写一个生产消费模型\"><a href=\"#写一个生产消费模型\" class=\"headerlink\" title=\"写一个生产消费模型\"></a>写一个生产消费模型</h3><h3 id=\"二分查找递归及非递归写法\"><a href=\"#二分查找递归及非递归写法\" class=\"headerlink\" title=\"二分查找递归及非递归写法\"></a>二分查找递归及非递归写法</h3><h3 id=\"用两个stack模拟一个queue\"><a href=\"#用两个stack模拟一个queue\" class=\"headerlink\" title=\"用两个stack模拟一个queue\"></a>用两个stack模拟一个queue</h3><h3 id=\"简单的谈谈jvm\"><a href=\"#简单的谈谈jvm\" class=\"headerlink\" title=\"简单的谈谈jvm\"></a>简单的谈谈jvm</h3><h3 id=\"项目中遇到的难点及解决方式\"><a href=\"#项目中遇到的难点及解决方式\" class=\"headerlink\" title=\"项目中遇到的难点及解决方式\"></a>项目中遇到的难点及解决方式</h3><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p> 整个面试的过程中，发现对基础的知识的提问相对于自己参与项目的提问整体时间所占比例大幅下降<br> 由于更加专业化，面试官在提问的过程中也着重于他们自己的业务。所以整体感觉，<br> 如果他们问的不是你自己感兴趣或者职业侧重点，不管是不是当前阶段的知识盲区，<br> 最后能不能拿到offer都可以在某种程度上作为自己选择接不接offer的一个参考点。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上周面了一下小米的金融，不管结果如何，觉得还是有必要对其中涉及到知识点及问题进行总结。</p>\n<h3 id=\"Object类中的方法\"><a href=\"#Object类中的方法\" class=\"headerlink\" title=\"Object类中的方法\"></a>Object类中的方法</h3><ul>\n<li><p>+equals():Boolean<br>原生的equals比较的是两个对象的引用是否相同，换而言之就是比较对象的内存地址是否一致</p>\n</li>\n<li><p>+hashcode():int<br>通过散列算法计算对象的hash值<br>拓展：解决hash冲突的方式有哪些？</p>\n</li>\n<li><p>+toString():String<br>返回对象的字符串表示方式</p>\n</li>\n<li><p>+wait()/wait(long time)/wait(long time,int nanos):void<br>使当前线程让出CPU资源进入等待状态，<br>当其他线程调用该对象的notify/notifyAll方法时跳出等待状态</p>\n</li>\n<li><p>+notify():void<br>唤醒监听这个对象的一个线程</p>\n</li>\n<li><p>+notifyAll():void<br>唤醒监听这个对象的所有线程</p>\n</li>\n<li><p>+getClass():Class<br>返回当前对象的runtime class</p>\n</li>\n<li><p>clone:Object<br>返回当前对象的副本，使浅克隆。深克隆的话可以用序列化及反序列化方式</p>\n</li>\n<li><p>finalize:void<br>当对象将被垃圾收集器回收的时候，阻止垃圾回收器回收，该方法只能使对象存活一次 </p>\n</li>\n</ul>\n<h3 id=\"保证线程安全的方式有哪些以及他们之间的区别？\"><a href=\"#保证线程安全的方式有哪些以及他们之间的区别？\" class=\"headerlink\" title=\"保证线程安全的方式有哪些以及他们之间的区别？\"></a>保证线程安全的方式有哪些以及他们之间的区别？</h3><p> 目前保证线程安全的三种方式<br>    1.用volatile修饰的变量<br>    2.用Reetrantlock 即lock和unlock修饰的代码块<br>    3.用synchronized修饰的方法或者代码块<br> volatile:<br>    使用该关键字修饰的，访问变量时告诉jvm需要从主内存中获取，保证可见性，不会造成线程阻塞；<br> synchronized:<br>    是jvm级的安全锁，保证可见性及原子性，使用时如果发生中断异常会主动释放当前锁，会造成线程阻塞；<br> Reetrantlock:<br>    代码级安全锁，保证可见性及原子性，使用时不会主动释放当前锁，需要手动释放，会造成线程阻塞</p>\n<p> 1）用法区别<br>     synchronized(隐式锁)：在需要同步的对象中加入此控制，synchronized可以加在方法上，也可以加在特定代码块中，括号中表示需要锁的对象。<br>     lock（显示锁）：需要显示指定起始位置和终止位置。一般使用ReentrantLock类做为锁，多个线程中必须要使用一个ReentrantLock类做为对 象才能保证锁的生效。且在加锁和解锁处需要通过lock()和unlock()显示指出。所以一般会在finally块中写unlock()以防死锁。<br> 2）synchronized和lock性能区别<br>     synchronized是托管给JVM执行的，而lock是java写的控制锁的代码。<br>     synchronized采用的是CPU悲观锁机制，即线程获得的是独占锁。独占锁意味着其 他线程只能依靠阻塞来等待线程释放锁。而在CPU转换线程阻塞时会引起线程上下文切换，当有很多线程竞争锁的时候，会引起CPU频繁的上下文切换导致效率很低。<br>     Lock用的是乐观锁方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。乐观锁实现的机制就 是CAS操作（Compare and Swap）。<br> 3）synchronized和lock用途区别<br>     synchronized原语和ReentrantLock在一般情况下没有什么区别，但是在非常复杂的同步应用中，请考虑使用ReentrantLock，特别是遇到下面2种需求的时候。<br>     1.某个线程在等待一个锁的控制权的这段时间需要中断<br>     2.需要分开处理一些wait-notify，ReentrantLock里面的Condition应用，能够控制notify哪个线程<br>     3.具有公平锁功能，每个到来的线程都将排队等候、</p>\n<h3 id=\"写一个生产消费模型\"><a href=\"#写一个生产消费模型\" class=\"headerlink\" title=\"写一个生产消费模型\"></a>写一个生产消费模型</h3><h3 id=\"二分查找递归及非递归写法\"><a href=\"#二分查找递归及非递归写法\" class=\"headerlink\" title=\"二分查找递归及非递归写法\"></a>二分查找递归及非递归写法</h3><h3 id=\"用两个stack模拟一个queue\"><a href=\"#用两个stack模拟一个queue\" class=\"headerlink\" title=\"用两个stack模拟一个queue\"></a>用两个stack模拟一个queue</h3><h3 id=\"简单的谈谈jvm\"><a href=\"#简单的谈谈jvm\" class=\"headerlink\" title=\"简单的谈谈jvm\"></a>简单的谈谈jvm</h3><h3 id=\"项目中遇到的难点及解决方式\"><a href=\"#项目中遇到的难点及解决方式\" class=\"headerlink\" title=\"项目中遇到的难点及解决方式\"></a>项目中遇到的难点及解决方式</h3><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p> 整个面试的过程中，发现对基础的知识的提问相对于自己参与项目的提问整体时间所占比例大幅下降<br> 由于更加专业化，面试官在提问的过程中也着重于他们自己的业务。所以整体感觉，<br> 如果他们问的不是你自己感兴趣或者职业侧重点，不管是不是当前阶段的知识盲区，<br> 最后能不能拿到offer都可以在某种程度上作为自己选择接不接offer的一个参考点。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj3okgq6k0000ls6eabm8q7gk","category_id":"cj3okgq6t0004ls6enfham4b1","_id":"cj3okgq78000dls6ei8elxhom"},{"post_id":"cj3okgq6q0002ls6e133twyxq","category_id":"cj3okgq6t0004ls6enfham4b1","_id":"cj3okgq79000gls6e1ydmv24p"},{"post_id":"cj3okgq6y0006ls6euvqonbri","category_id":"cj3okgq78000els6eeqty6z81","_id":"cj3okgq7b000kls6elmngm6za"},{"post_id":"cj3okgq710008ls6ererhwxn0","category_id":"cj3okgq79000hls6echgz2mo4","_id":"cj3okgq7c000pls6e76b2re6z"},{"post_id":"cj3okgq75000als6e2jnoz0il","category_id":"cj3okgq79000hls6echgz2mo4","_id":"cj3okgq7g000sls6e4pi662ga"}],"PostTag":[{"post_id":"cj3okgq6k0000ls6eabm8q7gk","tag_id":"cj3okgq6x0005ls6e9uoynd4m","_id":"cj3okgq7b000jls6e1vhhq84l"},{"post_id":"cj3okgq6k0000ls6eabm8q7gk","tag_id":"cj3okgq76000cls6eypro0scc","_id":"cj3okgq7b000lls6eef57ii3o"},{"post_id":"cj3okgq6k0000ls6eabm8q7gk","tag_id":"cj3okgq79000fls6ewsf100na","_id":"cj3okgq7c000ols6eqsz1po62"},{"post_id":"cj3okgq6q0002ls6e133twyxq","tag_id":"cj3okgq6x0005ls6e9uoynd4m","_id":"cj3okgq7f000rls6eculejkqe"},{"post_id":"cj3okgq6q0002ls6e133twyxq","tag_id":"cj3okgq7b000nls6eaftgk79x","_id":"cj3okgq7g000tls6eyt6i585s"},{"post_id":"cj3okgq6y0006ls6euvqonbri","tag_id":"cj3okgq7e000qls6et9mr42dj","_id":"cj3okgq7m000zls6ewelksh91"},{"post_id":"cj3okgq6y0006ls6euvqonbri","tag_id":"cj3okgq79000fls6ewsf100na","_id":"cj3okgq7m0010ls6ecyc8q6is"},{"post_id":"cj3okgq6y0006ls6euvqonbri","tag_id":"cj3okgq7i000vls6e06b5wy3n","_id":"cj3okgq7n0012ls6ehw9m6a7u"},{"post_id":"cj3okgq6y0006ls6euvqonbri","tag_id":"cj3okgq7j000wls6ewn7ekgjz","_id":"cj3okgq7n0013ls6e6s2495ew"},{"post_id":"cj3okgq6y0006ls6euvqonbri","tag_id":"cj3okgq7k000xls6e7vj4hs79","_id":"cj3okgq7o0015ls6etcna1cgq"},{"post_id":"cj3okgq710008ls6ererhwxn0","tag_id":"cj3okgq7e000qls6et9mr42dj","_id":"cj3okgq7r0018ls6enr2hxfbi"},{"post_id":"cj3okgq710008ls6ererhwxn0","tag_id":"cj3okgq7m0011ls6eeft4mfre","_id":"cj3okgq7r0019ls6epo0d1rhr"},{"post_id":"cj3okgq710008ls6ererhwxn0","tag_id":"cj3okgq7n0014ls6enpdu5df3","_id":"cj3okgq7r001bls6e6p5j00br"},{"post_id":"cj3okgq710008ls6ererhwxn0","tag_id":"cj3okgq7p0016ls6e9awzdh3k","_id":"cj3okgq7r001cls6egb5kguu5"},{"post_id":"cj3okgq75000als6e2jnoz0il","tag_id":"cj3okgq76000cls6eypro0scc","_id":"cj3okgq7s001els6e3t2qze54"},{"post_id":"cj3okgq75000als6e2jnoz0il","tag_id":"cj3okgq7r001als6ebgnluwfr","_id":"cj3okgq7t001fls6er12tmk8h"},{"post_id":"cj3okgq75000als6e2jnoz0il","tag_id":"cj3okgq7s001dls6ebztnk759","_id":"cj3okgq7t001gls6e1lwffq6m"}],"Tag":[{"name":"生活","_id":"cj3okgq6x0005ls6e9uoynd4m"},{"name":"工作","_id":"cj3okgq76000cls6eypro0scc"},{"name":"学习","_id":"cj3okgq79000fls6ewsf100na"},{"name":"旅行","_id":"cj3okgq7b000nls6eaftgk79x"},{"name":"java","_id":"cj3okgq7e000qls6et9mr42dj"},{"name":"后端","_id":"cj3okgq7i000vls6e06b5wy3n"},{"name":"中间件","_id":"cj3okgq7j000wls6ewn7ekgjz"},{"name":"数据库","_id":"cj3okgq7k000xls6e7vj4hs79"},{"name":"concurrent","_id":"cj3okgq7m0011ls6eeft4mfre"},{"name":"多线程","_id":"cj3okgq7n0014ls6enpdu5df3"},{"name":"Executor","_id":"cj3okgq7p0016ls6e9awzdh3k"},{"name":"面试","_id":"cj3okgq7r001als6ebgnluwfr"},{"name":"总结","_id":"cj3okgq7s001dls6ebztnk759"}]}}